drop table if exists t1, t2, t3;
create table t1(a int primary key, b int, c int, d int, key k1(b,c));
create table t2(a int primary key, b int, c int, d int, key k2(b,c));
create table t3(a int primary key, b int, c int, d int, key k3(b,c));
explain select/*+index(t1 k1)*/ * from t1 where b = 1 order by b, c;
Query Plan
==================================================
|ID|OPERATOR        |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |TABLE RANGE SCAN|t1(k1)|1       |7           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(1,MIN,MIN ; 1,MAX,MAX), 
      range_cond([t1.b = 1])
explain select/*+index(t1 k1), NO_USE_HASH_AGGREGATION*/ * from t1 where b = 1 group by b, c;
Query Plan
====================================================
|ID|OPERATOR          |NAME  |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE GROUP BY    |      |1       |8           |
|1 |└─TABLE RANGE SCAN|t1(k1)|1       |7           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      group([t1.c]), agg_func(nil)
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(1,MIN,MIN ; 1,MAX,MAX), 
      range_cond([t1.b = 1])
explain select/*+index(t1 k1)*/ * from t1 where b = 1 order by c;
Query Plan
==================================================
|ID|OPERATOR        |NAME  |EST.ROWS|EST.TIME(us)|
--------------------------------------------------
|0 |TABLE RANGE SCAN|t1(k1)|1       |7           |
==================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(1,MIN,MIN ; 1,MAX,MAX), 
      range_cond([t1.b = 1])
explain select/*+index(t1 k1), NO_USE_HASH_AGGREGATION*/ * from t1 where b = 1 group by c;
Query Plan
====================================================
|ID|OPERATOR          |NAME  |EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE GROUP BY    |      |1       |8           |
|1 |└─TABLE RANGE SCAN|t1(k1)|1       |7           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      group([t1.c]), agg_func(nil)
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(1,MIN,MIN ; 1,MAX,MAX), 
      range_cond([t1.b = 1])
explain select/*+index(t1 k1)*/ * from t1 where b = a order by b, a;
Query Plan
=================================================
|ID|OPERATOR       |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |TABLE FULL SCAN|t1(k1)|1       |8           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter([t1.b = t1.a]), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[true], 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), NO_USE_HASH_AGGREGATION*/ * from t1 where b = a group by a, b;
Query Plan
=================================================
|ID|OPERATOR       |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |TABLE FULL SCAN|t1(k1)|1       |8           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter([t1.b = t1.a]), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[true], 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c order by t1.b, t1.c;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |MERGE JOIN       |      |1       |14          |
|1 |├─TABLE FULL SCAN|t1(k1)|1       |7           |
|2 |└─TABLE FULL SCAN|t2(k2)|1       |7           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c group by t1.b, t1.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE GROUP BY     |      |1       |15          |
|1 |└─MERGE JOIN       |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c order by t2.b, t2.c;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |MERGE JOIN       |      |1       |14          |
|1 |├─TABLE FULL SCAN|t1(k1)|1       |7           |
|2 |└─TABLE FULL SCAN|t2(k2)|1       |7           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c group by t2.b, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE GROUP BY     |      |1       |15          |
|1 |└─MERGE JOIN       |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t2.b], [t2.c]), agg_func(nil)
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c order by t1.b, t1.c, t2.b, t2.c;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |MERGE JOIN       |      |1       |14          |
|1 |├─TABLE FULL SCAN|t1(k1)|1       |7           |
|2 |└─TABLE FULL SCAN|t2(k2)|1       |7           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c group by t1.b, t1.c, t2.b, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE GROUP BY     |      |1       |15          |
|1 |└─MERGE JOIN       |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c order by t1.b, t2.b, t1.c, t2.c;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |MERGE JOIN       |      |1       |14          |
|1 |├─TABLE FULL SCAN|t1(k1)|1       |7           |
|2 |└─TABLE FULL SCAN|t2(k2)|1       |7           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1, t2 where t1.b = t2.b and t1.c = t2.c group by t1.b, t2.b, t1.c, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE GROUP BY     |      |1       |15          |
|1 |└─MERGE JOIN       |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c order by t1.b, t1.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c group by t1.b, t1.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c order by t2.b, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c group by t2.b, t2.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t2.b], [t2.c]), agg_func(nil)
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c order by t3.b, t3.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c group by t3.b, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t3.b], [t3.c]), agg_func(nil)
  1 - output([t3.b], [t3.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c order by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c group by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t2.b = t3.b and t2.c = t3.c order by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t2.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t2.b = t3.b and t2.c = t3.c group by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t2.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c order by t1.b, t2.b, t3.b, t1.c, t2.c, t3.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t1.b = t3.b and t1.c = t3.c group by t1.b, t2.b, t3.b, t1.c, t2.c, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t3.b], [t2.c], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t3.b], [t2.c], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3)*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t2.b = t3.b and t2.c = t3.c order by t1.b, t2.b, t3.b, t1.c, t2.c, t3.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE JOIN         |      |1       |22          |
|1 |├─MERGE JOIN       |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t2.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3), index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/* from t1, t2, t3 
where t1.b = t2.b and t1.c = t2.c and t2.b = t3.b and t2.c = t3.c group by t1.b, t2.b, t3.b, t1.c, t2.c, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE JOIN         |      |1       |22          |
|2 |  ├─MERGE JOIN       |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t3.b], [t2.c], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t3.b], [t2.c], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t2.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c order by t1.b, t1.c;
Query Plan
===================================================
|ID|OPERATOR         |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------
|0 |MERGE OUTER JOIN |      |1       |14          |
|1 |├─TABLE FULL SCAN|t1(k1)|1       |7           |
|2 |└─TABLE FULL SCAN|t2(k2)|1       |7           |
===================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  2 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c group by t1.b, t1.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE GROUP BY     |      |1       |15          |
|1 |└─MERGE OUTER JOIN |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c order by t2.b, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SORT               |      |1       |15          |
|1 |└─MERGE OUTER JOIN |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      sort_keys([t2.b, ASC], [t2.c, ASC])
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2), NO_USE_HASH_AGGREGATION*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c group by t2.b, t2.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |15          |
|1 |└─PARTITION SORT     |      |1       |15          |
|2 |  └─MERGE OUTER JOIN |      |1       |14          |
|3 |    ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |    └─TABLE FULL SCAN|t2(k2)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t2.b], [t2.c]), agg_func(nil)
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      sort_keys([HASH(t2.b, t2.c), ASC], [t2.b, ASC], [t2.c, ASC])
  2 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c order by t1.b, t1.c, t2.b, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SORT               |      |1       |15          |
|1 |└─MERGE OUTER JOIN |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC], [t1.c, ASC], [t2.b, ASC], [t2.c, ASC]), prefix_pos(2)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*, NO_USE_HASH_AGGREGATION*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c group by t1.b, t1.c, t2.b, t2.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |15          |
|1 |└─PARTITION SORT     |      |1       |15          |
|2 |  └─MERGE OUTER JOIN |      |1       |14          |
|3 |    ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |    └─TABLE FULL SCAN|t2(k2)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      sort_keys([HASH(t1.b, t1.c, t2.b, t2.c), ASC], [t1.b, ASC], [t1.c, ASC], [t2.b, ASC], [t2.c, ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c order by t1.b, t2.b, t1.c, t2.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |SORT               |      |1       |15          |
|1 |└─MERGE OUTER JOIN |      |1       |14          |
|2 |  ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |  └─TABLE FULL SCAN|t2(k2)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC], [t2.b, ASC], [t1.c, ASC], [t2.c, ASC]), prefix_pos(1)
  1 - output([t1.b], [t2.b], [t1.c], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1), index(t2 k2)*, NO_USE_HASH_AGGREGATION*/ * from t1 left join t2 on t1.b = t2.b and t1.c = t2.c group by t1.b, t2.b, t1.c, t2.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |15          |
|1 |└─PARTITION SORT     |      |1       |15          |
|2 |  └─MERGE OUTER JOIN |      |1       |14          |
|3 |    ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |    └─TABLE FULL SCAN|t2(k2)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      sort_keys([HASH(t1.b, t1.c, t2.b, t2.c), ASC], [t1.b, ASC], [t1.c, ASC], [t2.b, ASC], [t2.c, ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3)*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c order by t1.b, t1.c;
Query Plan
=====================================================
|ID|OPERATOR           |NAME  |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE OUTER JOIN   |      |1       |22          |
|1 |├─MERGE OUTER JOIN |      |1       |14          |
|2 |│ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|3 |│ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|4 |└─TABLE FULL SCAN  |t3(k3)|1       |7           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  1 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  3 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c group by t1.b, t1.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE GROUP BY       |      |1       |22          |
|1 |└─MERGE OUTER JOIN   |      |1       |22          |
|2 |  ├─MERGE OUTER JOIN |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t1.a], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3)*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c order by t2.b, t2.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SORT                 |      |1       |22          |
|1 |└─MERGE OUTER JOIN   |      |1       |22          |
|2 |  ├─MERGE OUTER JOIN |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      sort_keys([t2.b, ASC], [t2.c, ASC])
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c group by t2.b, t2.c;
Query Plan
=========================================================
|ID|OPERATOR               |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |MERGE GROUP BY         |      |1       |22          |
|1 |└─PARTITION SORT       |      |1       |22          |
|2 |  └─MERGE OUTER JOIN   |      |1       |22          |
|3 |    ├─MERGE OUTER JOIN |      |1       |14          |
|4 |    │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|5 |    │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|6 |    └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t2.b], [t2.c]), agg_func(nil)
  1 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      sort_keys([HASH(t2.b, t2.c), ASC], [t2.b, ASC], [t2.c, ASC])
  2 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t2.b], [t2.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3)*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c order by t3.b, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SORT                 |      |1       |22          |
|1 |└─MERGE OUTER JOIN   |      |1       |22          |
|2 |  ├─MERGE OUTER JOIN |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      sort_keys([t3.b, ASC], [t3.c, ASC])
  1 - output([t3.b], [t3.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c group by t3.b, t3.c;
Query Plan
=========================================================
|ID|OPERATOR               |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |MERGE GROUP BY         |      |1       |22          |
|1 |└─PARTITION SORT       |      |1       |22          |
|2 |  └─MERGE OUTER JOIN   |      |1       |22          |
|3 |    ├─MERGE OUTER JOIN |      |1       |14          |
|4 |    │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|5 |    │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|6 |    └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t3.b], [t3.c]), agg_func(nil)
  1 - output([t3.b], [t3.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      sort_keys([HASH(t3.b, t3.c), ASC], [t3.b, ASC], [t3.c, ASC])
  2 - output([t3.b], [t3.c], [t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3)*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c order by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SORT                 |      |1       |22          |
|1 |└─MERGE OUTER JOIN   |      |1       |22          |
|2 |  ├─MERGE OUTER JOIN |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC], [t1.c, ASC], [t2.b, ASC], [t2.c, ASC], [t3.b, ASC], [t3.c, ASC]), prefix_pos(2)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c group by t1.b, t1.c, t2.b, t2.c, t3.b, t3.c;
Query Plan
=========================================================
|ID|OPERATOR               |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |MERGE GROUP BY         |      |1       |22          |
|1 |└─PARTITION SORT       |      |1       |22          |
|2 |  └─MERGE OUTER JOIN   |      |1       |22          |
|3 |    ├─MERGE OUTER JOIN |      |1       |14          |
|4 |    │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|5 |    │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|6 |    └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      sort_keys([HASH(t1.b, t1.c, t2.b, t2.c, t3.b, t3.c), ASC], [t1.b, ASC], [t1.c, ASC], [t2.b, ASC], [t2.c, ASC], [t3.b, ASC], [t3.c, ASC])
  2 - output([t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c], [t1.a], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.b], [t1.c], [t2.b], [t2.c], [t1.a], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3)*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c order by t1.b, t2.b, t3.b, t2.c, t2.c, t3.c;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SORT                 |      |1       |22          |
|1 |└─MERGE OUTER JOIN   |      |1       |22          |
|2 |  ├─MERGE OUTER JOIN |      |1       |14          |
|3 |  │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|4 |  │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|5 |  └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC], [t2.b, ASC], [t3.b, ASC], [t2.c, ASC], [t3.c, ASC]), prefix_pos(1)
  1 - output([t1.b], [t2.b], [t3.b], [t2.c], [t3.c], [t1.a], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  2 - output([t1.b], [t2.b], [t2.c], [t1.a], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  4 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3),index(t1 k1), index(t2 k2), index(t3 k3), NO_USE_HASH_AGGREGATION*/ * 
from t1 left join t2 on t1.b = t2.b and t1.c = t2.c left join t3 on t1.b = t3.b and t1.c = t3.c group by t1.b, t2.b, t3.b, t2.c, t2.c, t3.c;
Query Plan
=========================================================
|ID|OPERATOR               |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |MERGE GROUP BY         |      |1       |22          |
|1 |└─PARTITION SORT       |      |1       |22          |
|2 |  └─MERGE OUTER JOIN   |      |1       |22          |
|3 |    ├─MERGE OUTER JOIN |      |1       |14          |
|4 |    │ ├─TABLE FULL SCAN|t1(k1)|1       |7           |
|5 |    │ └─TABLE FULL SCAN|t2(k2)|1       |7           |
|6 |    └─TABLE FULL SCAN  |t3(k3)|1       |7           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      group([t1.b], [t2.b], [t3.b], [t2.c], [t3.c]), agg_func(nil)
  1 - output([t1.b], [t2.b], [t3.b], [t2.c], [t3.c], [t1.a], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      sort_keys([HASH(t1.b, t2.b, t3.b, t2.c, t3.c), ASC], [t1.b, ASC], [t2.b, ASC], [t3.b, ASC], [t2.c, ASC], [t3.c, ASC])
  2 - output([t1.b], [t2.b], [t3.b], [t2.c], [t3.c], [t1.a], [t1.c], [t1.d], [t2.a], [t2.d], [t3.a], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.b = t3.b], [t1.c = t3.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  3 - output([t1.b], [t2.b], [t2.c], [t1.a], [t1.c], [t1.d], [t2.a], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.b = t2.b], [t1.c = t2.c]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t2.b], [t2.c], [t2.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0)
      is_index_back=true, is_global_index=false, 
      range_key([t3.b], [t3.c], [t3.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1)*/ * from t1 where t1.b = t1.d and exists (select 1 from t2 where t1.a = t2.a) order by b, d;
Query Plan
=======================================================
|ID|OPERATOR             |NAME  |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |SORT                 |      |1       |10          |
|1 |└─MERGE JOIN         |      |1       |10          |
|2 |  ├─TABLE FULL SCAN  |t2    |1       |3           |
|3 |  └─SORT             |      |1       |8           |
|4 |    └─TABLE FULL SCAN|t1(k1)|1       |8           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC])
  1 - output([t1.b], [t1.a], [t1.c], [t1.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
      merge_directions([ASC])
  2 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.a]), range(MIN ; MAX)always true
  3 - output([t1.b], [t1.a], [t1.c], [t1.d]), filter(nil), rowset=16
      sort_keys([t1.a, ASC])
  4 - output([t1.a], [t1.b], [t1.d], [t1.c]), filter([t1.b = t1.d]), rowset=16
      access([t1.a], [t1.b], [t1.d], [t1.c]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+index(t1 k1)*/ * from t1 where t1.b = t1.d and not exists (select 1 from t2 where t1.a = t2.a) order by b, d;
Query Plan
=========================================================
|ID|OPERATOR               |NAME  |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------
|0 |SORT                   |      |1       |10          |
|1 |└─HASH RIGHT ANTI JOIN |      |1       |10          |
|2 |  ├─TABLE FULL SCAN    |t2    |1       |3           |
|3 |  └─TABLE FULL SCAN    |t1(k1)|1       |8           |
=========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      sort_keys([t1.b, ASC])
  1 - output([t1.b], [t1.a], [t1.c], [t1.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  2 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p0)
      is_index_back=false, is_global_index=false, 
      range_key([t2.a]), range(MIN ; MAX)always true
  3 - output([t1.a], [t1.b], [t1.d], [t1.c]), filter([t1.b = t1.d]), rowset=16
      access([t1.a], [t1.b], [t1.d], [t1.c]), partitions(p0)
      is_index_back=true, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.b], [t1.c], [t1.a]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b int, c int) partition by hash(a) partitions 5;
create table t2(a int, b int, c int) partition by hash(a) partitions 5;
create table t3(a int, b int, c int) partition by hash(a) partitions 5;
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH JOIN          |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH OUTER JOIN    |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |22          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |22          |
|4 |      ├─TABLE FULL SCAN    |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |33          |
|4 |      ├─HASH JOIN          |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |33          |
|4 |      ├─HASH JOIN          |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t3.a = t1.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |33          |
|3 |    └─HASH JOIN               |        |1       |33          |
|4 |      ├─HASH RIGHT OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN       |t3      |1       |11          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH OUTER JOIN        |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH OUTER JOIN        |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2);
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |23          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |23          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |22          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |22          |
|4 |      ├─TABLE FULL SCAN    |t2      |1       |11          |
|5 |      └─TABLE FULL SCAN    |t1      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2) and t1.a in (select t3.a from t3);
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH RIGHT SEMI JOIN   |        |1       |33          |
|4 |      ├─TABLE FULL SCAN      |t3      |1       |11          |
|5 |      └─HASH RIGHT SEMI JOIN |        |1       |22          |
|6 |        ├─TABLE FULL SCAN    |t2      |1       |11          |
|7 |        └─TABLE FULL SCAN    |t1      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2 where t2.a in (select t3.a from t3));
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |33          |
|4 |      ├─SUBPLAN SCAN       |VIEW2   |1       |22          |
|5 |      │ └─HASH SEMI JOIN   |        |1       |22          |
|6 |      │   ├─TABLE FULL SCAN|t2      |1       |11          |
|7 |      │   └─TABLE FULL SCAN|t3      |1       |11          |
|8 |      └─TABLE FULL SCAN    |t1      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = VIEW2.a]), other_conds(nil)
  4 - output([VIEW2.a]), filter(nil), rowset=16
      access([VIEW2.a])
  5 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b int, c int) partition by key(a) partitions 5;
create table t2(a int, b int, c int) partition by key(a) partitions 5;
create table t3(a int, b int, c int) partition by key(a) partitions 5;
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH JOIN          |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH OUTER JOIN    |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |25          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |24          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |22          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |22          |
|4 |      ├─TABLE FULL SCAN    |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH OUTER JOIN    |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |33          |
|4 |      ├─HASH JOIN          |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |33          |
|4 |      ├─HASH JOIN          |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH JOIN        |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t3.a = t1.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─HASH OUTER JOIN  |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |11          |
|7 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |33          |
|3 |    └─HASH JOIN               |        |1       |33          |
|4 |      ├─HASH RIGHT OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN       |t3      |1       |11          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH OUTER JOIN        |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |36          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH OUTER JOIN        |        |1       |33          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |22          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |      └─TABLE FULL SCAN      |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.a, t2.b, t2.c, t3.a, t3.b, t3.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c], [t3.b], [t3.c]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t1.c], [t2.b], [t2.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b], [t3.c]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2);
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |23          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |23          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |22          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |22          |
|4 |      ├─TABLE FULL SCAN    |t2      |1       |11          |
|5 |      └─TABLE FULL SCAN    |t1      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2) and t1.a in (select t3.a from t3);
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH RIGHT SEMI JOIN   |        |1       |33          |
|4 |      ├─TABLE FULL SCAN      |t3      |1       |11          |
|5 |      └─HASH RIGHT SEMI JOIN |        |1       |22          |
|6 |        ├─TABLE FULL SCAN    |t2      |1       |11          |
|7 |        └─TABLE FULL SCAN    |t1      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2 where t2.a in (select t3.a from t3));
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |33          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |33          |
|4 |      ├─SUBPLAN SCAN       |VIEW2   |1       |22          |
|5 |      │ └─HASH SEMI JOIN   |        |1       |22          |
|6 |      │   ├─TABLE FULL SCAN|t2      |1       |11          |
|7 |      │   └─TABLE FULL SCAN|t3      |1       |11          |
|8 |      └─TABLE FULL SCAN    |t1      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t1.a = VIEW2.a]), other_conds(nil)
  4 - output([VIEW2.a]), filter(nil), rowset=16
      access([VIEW2.a])
  5 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b int) partition by range(a) (
partition p0 values less than (100),
partition p1 values less than (200));
create table t2(a int, b int) partition by range(a) (
partition p0 values less than (100),
partition p1 values less than (200));
create table t3(a int, b int) partition by range(a) (
partition p0 values less than (100),
partition p1 values less than (200));
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |11          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR|        |1       |9           |
|3 |    └─HASH JOIN          |        |1       |9           |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |11          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR|        |1       |9           |
|3 |    └─HASH OUTER JOIN    |        |1       |9           |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |11          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |9           |
|3 |    └─HASH FULL OUTER JOIN |        |1       |9           |
|4 |      ├─TABLE FULL SCAN    |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN    |t2      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |14          |
|4 |      ├─HASH JOIN          |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN    |t3      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |14          |
|4 |      ├─HASH JOIN          |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN    |t3      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t1.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t1.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t3.a = t1.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |14          |
|3 |    └─HASH JOIN               |        |1       |14          |
|4 |      ├─HASH RIGHT OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |5           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH OUTER JOIN        |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH OUTER JOIN        |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2);
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |10          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |10          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |9           |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |9           |
|4 |      ├─TABLE FULL SCAN    |t2      |1       |5           |
|5 |      └─TABLE FULL SCAN    |t1      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2) and t1.a in (select t3.a from t3);
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |14          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH RIGHT SEMI JOIN   |        |1       |14          |
|4 |      ├─TABLE FULL SCAN      |t3      |1       |5           |
|5 |      └─HASH RIGHT SEMI JOIN |        |1       |9           |
|6 |        ├─TABLE FULL SCAN    |t2      |1       |5           |
|7 |        └─TABLE FULL SCAN    |t1      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2 where t2.a in (select t3.a from t3));
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |14          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |14          |
|4 |      ├─SUBPLAN SCAN       |VIEW2   |1       |9           |
|5 |      │ └─HASH SEMI JOIN   |        |1       |9           |
|6 |      │   ├─TABLE FULL SCAN|t2      |1       |5           |
|7 |      │   └─TABLE FULL SCAN|t3      |1       |5           |
|8 |      └─TABLE FULL SCAN    |t1      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = VIEW2.a]), other_conds(nil)
  4 - output([VIEW2.a]), filter(nil), rowset=16
      access([VIEW2.a])
  5 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
create table t1(a datetime, b int) partition by range columns(a) (
partition p0 values less than ('2011-01-01'),
partition p1 values less than ('2116-01-01'));
create table t2(a datetime, b int) partition by range columns(a) (
partition p0 values less than ('2011-01-01'),
partition p1 values less than ('2116-01-01'));
create table t3(a datetime, b int) partition by range columns(a) (
partition p0 values less than ('2011-01-01'),
partition p1 values less than ('2116-01-01'));
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |12          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR|        |1       |9           |
|3 |    └─HASH JOIN          |        |1       |9           |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |12          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR|        |1       |9           |
|3 |    └─HASH OUTER JOIN    |        |1       |9           |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |12          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |11          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |9           |
|3 |    └─HASH FULL OUTER JOIN |        |1       |9           |
|4 |      ├─TABLE FULL SCAN    |t1      |1       |5           |
|5 |      └─TABLE FULL SCAN    |t2      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN   |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH OUTER JOIN    |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t1.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |14          |
|4 |      ├─HASH JOIN          |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN    |t3      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a full join t3 on t2.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH FULL OUTER JOIN |        |1       |14          |
|4 |      ├─HASH JOIN          |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN  |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN  |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN    |t3      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH JOIN        |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t1.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t1.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t3.a = t1.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t1.a = t3.a;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR|        |1       |14          |
|3 |    └─HASH JOIN          |        |1       |14          |
|4 |      ├─HASH OUTER JOIN  |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |5           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |5           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a inner join t3 on t2.a = t3.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |14          |
|3 |    └─HASH JOIN               |        |1       |14          |
|4 |      ├─HASH RIGHT OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |5           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t1.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH OUTER JOIN        |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a left join t3 on t2.a = t3.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |17          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |16          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH OUTER JOIN        |        |1       |14          |
|4 |      ├─HASH FULL OUTER JOIN |        |1       |9           |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |5           |
|6 |      │ └─TABLE FULL SCAN    |t2      |1       |5           |
|7 |      └─TABLE FULL SCAN      |t3      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t1.a], [t1.b], [t2.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  4 - output([t2.a], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2);
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |10          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |10          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |9           |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |9           |
|4 |      ├─TABLE FULL SCAN    |t2      |1       |5           |
|5 |      └─TABLE FULL SCAN    |t1      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  4 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2) and t1.a in (select t3.a from t3);
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |15          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |14          |
|3 |    └─HASH RIGHT SEMI JOIN   |        |1       |14          |
|4 |      ├─TABLE FULL SCAN      |t3      |1       |5           |
|5 |      └─HASH RIGHT SEMI JOIN |        |1       |9           |
|6 |        ├─TABLE FULL SCAN    |t2      |1       |5           |
|7 |        └─TABLE FULL SCAN    |t1      |1       |5           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 where t1.a in (select t2.a from t2 where t2.a in (select t3.a from t3));
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |15          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |14          |
|3 |    └─HASH RIGHT SEMI JOIN |        |1       |14          |
|4 |      ├─SUBPLAN SCAN       |VIEW2   |1       |9           |
|5 |      │ └─HASH SEMI JOIN   |        |1       |9           |
|6 |      │   ├─TABLE FULL SCAN|t2      |1       |5           |
|7 |      │   └─TABLE FULL SCAN|t3      |1       |5           |
|8 |      └─TABLE FULL SCAN    |t1      |1       |5           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = VIEW2.a]), other_conds(nil)
  4 - output([VIEW2.a]), filter(nil), rowset=16
      access([VIEW2.a])
  5 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a]), other_conds(nil)
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b datetime, primary key(a, b)) partition by hash(a) 
subpartition by range columns(b) 
subpartition template (
subpartition p0 values less than ('2016-10-10'),  
subpartition p1 values less than ('2116-3-30')) partitions 2;
create table t2(a int, b datetime, primary key(a, b)) partition by hash(a) 
subpartition by range columns(b) 
subpartition template (
subpartition p0 values less than ('2016-10-10'),  
subpartition p1 values less than ('2116-3-30')) partitions 2;
create table t3(a int, b datetime, primary key(a, b)) partition by hash(a) 
subpartition by range columns(b) 
subpartition template (
subpartition p0 values less than ('2016-10-10'),  
subpartition p1 values less than ('2116-3-30')) partitions 2;
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |20          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |19          |
|2 |  └─PX PARTITION ITERATOR|        |1       |17          |
|3 |    └─MERGE JOIN         |        |1       |17          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |9           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.b = t2.b and t2.a = t3.a and t2.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t2.b], [t3.b], [t2.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t2.b], [t3.b], [t2.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t2.b], [t2.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.b = t2.b and t1.a = t3.a and t1.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |20          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |19          |
|2 |  └─PX PARTITION ITERATOR|        |1       |17          |
|3 |    └─MERGE OUTER JOIN   |        |1       |17          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |9           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE OUTER JOIN   |        |1       |26          |
|4 |      ├─MERGE OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─HASH OUTER JOIN    |        |1       |26          |
|4 |      ├─MERGE OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |20          |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |19          |
|2 |  └─PX PARTITION ITERATOR   |        |1       |17          |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |17          |
|4 |      ├─TABLE FULL SCAN     |t1      |1       |9           |
|5 |      └─TABLE FULL SCAN     |t2      |1       |9           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |26          |
|3 |    └─HASH FULL OUTER JOIN    |        |1       |26          |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |9           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |26          |
|3 |    └─HASH FULL OUTER JOIN    |        |1       |26          |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |9           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE OUTER JOIN   |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE OUTER JOIN   |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR   |        |1       |26          |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |26          |
|4 |      ├─MERGE JOIN          |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN   |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN   |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN     |t3      |1       |9           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR   |        |1       |26          |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |26          |
|4 |      ├─MERGE JOIN          |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN   |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN   |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN     |t3      |1       |9           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t1.a], [t2.b], [t3.b], [t2.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t1.a], [t2.b], [t3.b], [t2.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t3.a = t1.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t2.b], [t2.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |28          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |26          |
|3 |    └─HASH JOIN                |        |1       |26          |
|4 |      ├─MERGE RIGHT OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN      |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN        |t3      |1       |9           |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |26          |
|3 |    └─HASH OUTER JOIN         |        |1       |26          |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |9           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |30          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |29          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |26          |
|3 |    └─HASH OUTER JOIN         |        |1       |26          |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |9           |
|7 |      └─TABLE FULL SCAN       |t3      |1       |9           |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
  4 - output([t2.a], [t2.b], [t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2);
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |19          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |18          |
|2 |  └─PX PARTITION ITERATOR|        |1       |17          |
|3 |    └─MERGE JOIN         |        |1       |17          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |9           |
|5 |      └─TABLE FULL SCAN  |t2      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2) and (t1.a, t1.b) in (select t3.a, t3.b from t3);
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |27          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |27          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─MERGE JOIN       |        |1       |17          |
|5 |      │ ├─TABLE FULL SCAN|t1      |1       |9           |
|6 |      │ └─TABLE FULL SCAN|t2      |1       |9           |
|7 |      └─TABLE FULL SCAN  |t3      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2 where (t2.a, t2.b) in (select t3.a, t3.b from t3));
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |27          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |27          |
|2 |  └─PX PARTITION ITERATOR|        |1       |26          |
|3 |    └─MERGE JOIN         |        |1       |26          |
|4 |      ├─TABLE FULL SCAN  |t3      |1       |9           |
|5 |      └─MERGE JOIN       |        |1       |17          |
|6 |        ├─TABLE FULL SCAN|t1      |1       |9           |
|7 |        └─TABLE FULL SCAN|t2      |1       |9           |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b]), range(MIN,MIN ; MAX,MAX)always true
  5 - output([t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  6 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b]), range(MIN,MIN ; MAX,MAX)always true
  7 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-1], p1sp[0-1])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b]), range(MIN,MIN ; MAX,MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b int, c int, d int, primary key(a, b, c)) 
partition by range columns(a) subpartition by hash(b) subpartitions 5 ( 
partition p0 values less than (1),
partition p1 values less than (2),
partition p2 values less than (3),
partition p3 values less than (4),
partition p4 values less than (maxvalue)
);
create table t2(a int, b int, c int, d int, primary key(a, b, c))
partition by range columns(a) subpartition by hash(b) subpartitions 5 ( 
partition p0 values less than (1),
partition p1 values less than (2),
partition p2 values less than (3),
partition p3 values less than (4),
partition p4 values less than (maxvalue)
);
create table t3(a int, b int, c int, d int, primary key(a, b, c))
partition by range columns(a) subpartition by hash(b) subpartitions 5 ( 
partition p0 values less than (1),
partition p1 values less than (2),
partition p2 values less than (3),
partition p3 values less than (4),
partition p4 values less than (maxvalue)
);
explain select/*+leading(t1,t2,t3)*/ * from t1, t2 where t1.a = t2.a and t1.b = t2.b;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |73          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |72          |
|2 |  └─PX PARTITION ITERATOR|        |1       |69          |
|3 |    └─NESTED-LOOP JOIN   |        |1       |69          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |53          |
|5 |      └─TABLE RANGE SCAN |t2      |1       |383         |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.b = t2.b and t2.a = t3.a and t2.b = t3.b;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME    |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |PX COORDINATOR            |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR      |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR |        |1       |85          |
|3 |    └─NESTED-LOOP JOIN    |        |1       |85          |
|4 |      ├─NESTED-LOOP JOIN  |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN|t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN  |t3      |1       |383         |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t2.b(:3)]), use_batch=false
  4 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1, t2, t3 where t1.a = t2.a and t1.b = t2.b and t1.a = t3.a and t1.b = t3.b;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME    |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |PX COORDINATOR            |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR      |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR |        |1       |85          |
|3 |    └─NESTED-LOOP JOIN    |        |1       |85          |
|4 |      ├─NESTED-LOOP JOIN  |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN|t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN  |t3      |1       |383         |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |73          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |72          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |69          |
|3 |    └─NESTED-LOOP OUTER JOIN |        |1       |69          |
|4 |      ├─TABLE FULL SCAN      |t1      |1       |53          |
|5 |      └─TABLE RANGE SCAN     |t2      |1       |383         |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |85          |
|3 |    └─NESTED-LOOP OUTER JOIN   |        |1       |85          |
|4 |      ├─NESTED-LOOP OUTER JOIN |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN     |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN       |t3      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |85          |
|3 |    └─NESTED-LOOP OUTER JOIN   |        |1       |85          |
|4 |      ├─NESTED-LOOP OUTER JOIN |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN     |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN       |t3      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t2.a(:2)], [t2.b(:3)]), use_batch=false
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |110         |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |109         |
|2 |  └─PX PARTITION ITERATOR   |        |1       |106         |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |106         |
|4 |      ├─TABLE FULL SCAN     |t1      |1       |53          |
|5 |      └─TABLE FULL SCAN     |t2      |1       |53          |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |165         |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |163         |
|2 |  └─PX PARTITION ITERATOR     |        |1       |159         |
|3 |    └─HASH FULL OUTER JOIN    |        |1       |159         |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |106         |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |53          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |53          |
|7 |      └─TABLE FULL SCAN       |t3      |1       |53          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
  4 - output([t1.a], [t1.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |165         |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |163         |
|2 |  └─PX PARTITION ITERATOR     |        |1       |159         |
|3 |    └─HASH FULL OUTER JOIN    |        |1       |159         |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |106         |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |53          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |53          |
|7 |      └─TABLE FULL SCAN       |t3      |1       |53          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |85          |
|3 |    └─NESTED-LOOP OUTER JOIN |        |1       |85          |
|4 |      ├─NESTED-LOOP JOIN     |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN   |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN     |t3      |1       |383         |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |85          |
|3 |    └─NESTED-LOOP OUTER JOIN |        |1       |85          |
|4 |      ├─NESTED-LOOP JOIN     |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN    |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN   |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN     |t3      |1       |383         |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t2.a(:2)], [t2.b(:3)]), use_batch=false
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |128         |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |126         |
|2 |  └─PX PARTITION ITERATOR   |        |1       |122         |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |122         |
|4 |      ├─NESTED-LOOP JOIN    |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN   |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN  |t2      |1       |383         |
|7 |      └─TABLE FULL SCAN     |t3      |1       |53          |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a], [t1.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b full join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |128         |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |126         |
|2 |  └─PX PARTITION ITERATOR   |        |1       |122         |
|3 |    └─MERGE FULL OUTER JOIN |        |1       |122         |
|4 |      ├─NESTED-LOOP JOIN    |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN   |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN  |t2      |1       |383         |
|7 |      └─TABLE FULL SCAN     |t3      |1       |53          |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t2.b], [t3.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.c], [t3.d]), filter(nil), rowset=16
      equal_conds([t2.a = t3.a], [t2.b = t3.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |85          |
|3 |    └─NESTED-LOOP JOIN         |        |1       |85          |
|4 |      ├─NESTED-LOOP OUTER JOIN |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN     |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN       |t3      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 left join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME    |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |PX COORDINATOR            |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR      |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR |        |1       |85          |
|3 |    └─NESTED-LOOP JOIN    |        |1       |85          |
|4 |      ├─NESTED-LOOP JOIN  |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN|t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN  |t3      |1       |383         |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t2.b(:3)]), use_batch=false
  4 - output([t1.a], [t2.b], [t1.b], [t1.c], [t1.d], [t2.a], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([t3.a = :2], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |91          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |89          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |85          |
|3 |    └─NESTED-LOOP JOIN         |        |1       |85          |
|4 |      ├─NESTED-LOOP OUTER JOIN |        |1       |69          |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |53          |
|6 |      │ └─TABLE RANGE SCAN     |t2      |1       |383         |
|7 |      └─TABLE RANGE SCAN       |t3      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d], [t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:0 = t2.a], [:1 = t2.b])
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b inner join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |128         |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |126         |
|2 |  └─PX PARTITION ITERATOR      |        |1       |122         |
|3 |    └─NESTED-LOOP JOIN         |        |1       |122         |
|4 |      ├─MERGE RIGHT OUTER JOIN |        |1       |106         |
|5 |      │ ├─TABLE FULL SCAN      |t1      |1       |53          |
|6 |      │ └─TABLE FULL SCAN      |t2      |1       |53          |
|7 |      └─TABLE RANGE SCAN       |t3      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t2.a(:0)], [t2.b(:1)]), use_batch=false
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:0 = t3.a], [:1 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t1.a = t3.a and t1.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |128         |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |126         |
|2 |  └─PX PARTITION ITERATOR     |        |1       |122         |
|3 |    └─NESTED-LOOP OUTER JOIN  |        |1       |122         |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |106         |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |53          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |53          |
|7 |      └─TABLE RANGE SCAN      |t3      |1       |383         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:0)], [t1.b(:1)]), use_batch=false
  4 - output([t1.a], [t1.b], [t2.a], [t2.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:0 = t3.a], [:1 = t3.b])
explain select/*+leading(t1,t2,t3)*/ * from t1 full join t2 on t1.a = t2.a and t1.b = t2.b left join t3 on t2.a = t3.a and t2.b = t3.b;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |128         |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |126         |
|2 |  └─PX PARTITION ITERATOR     |        |1       |122         |
|3 |    └─NESTED-LOOP OUTER JOIN  |        |1       |122         |
|4 |      ├─MERGE FULL OUTER JOIN |        |1       |106         |
|5 |      │ ├─TABLE FULL SCAN     |t1      |1       |53          |
|6 |      │ └─TABLE FULL SCAN     |t2      |1       |53          |
|7 |      └─TABLE RANGE SCAN      |t3      |1       |383         |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d, t2.a, t2.b, t2.c, t2.d, t3.a, t3.b, t3.c, t3.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d], [t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t2.a(:0)], [t2.b(:1)]), use_batch=false
  4 - output([t2.a], [t2.b], [t1.a], [t1.b], [t1.c], [t1.d], [t2.c], [t2.d]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a], [t1.b = t2.b]), other_conds(nil)
      merge_directions([ASC], [ASC])
  5 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  6 - output([t2.a], [t2.b], [t2.c], [t2.d]), filter(nil), rowset=16
      access([t2.a], [t2.b], [t2.c], [t2.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t3.a], [t3.b], [t3.c], [t3.d]), filter(nil), rowset=16
      access([t3.a], [t3.b], [t3.c], [t3.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:0 = t3.a], [:1 = t3.b])
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2);
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |66          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |65          |
|2 |  └─PX PARTITION ITERATOR  |        |1       |64          |
|3 |    └─NESTED-LOOP JOIN     |        |1       |64          |
|4 |      ├─SUBPLAN SCAN       |VIEW2   |1       |53          |
|5 |      │ └─MERGE DISTINCT   |        |1       |53          |
|6 |      │   └─TABLE FULL SCAN|t2      |1       |53          |
|7 |      └─TABLE RANGE SCAN   |t1      |1       |383         |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      conds(nil), nl_params_([VIEW2.VIEW1.a(:0)], [VIEW2.VIEW1.b(:1)]), use_batch=false
  4 - output([VIEW2.VIEW1.a], [VIEW2.VIEW1.b]), filter(nil), rowset=16
      access([VIEW2.VIEW1.a], [VIEW2.VIEW1.b])
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      distinct([t2.a], [t2.b])
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  7 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN ; MAX), 
      range_cond([t1.a = :0], [t1.b = :1])
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2) and (t1.a, t1.b) in (select t3.a, t3.b from t3);
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |79          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |79          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |78          |
|3 |    └─NESTED-LOOP SEMI JOIN  |        |1       |78          |
|4 |      ├─NESTED-LOOP JOIN     |        |1       |64          |
|5 |      │ ├─SUBPLAN SCAN       |VIEW3   |1       |53          |
|6 |      │ │ └─MERGE DISTINCT   |        |1       |53          |
|7 |      │ │   └─TABLE FULL SCAN|t2      |1       |53          |
|8 |      │ └─TABLE RANGE SCAN   |t1      |1       |383         |
|9 |      └─TABLE RANGE SCAN     |t3      |1       |449         |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      conds(nil), nl_params_([VIEW3.VIEW1.a(:0)], [VIEW3.VIEW1.b(:1)]), use_batch=false
  5 - output([VIEW3.VIEW1.a], [VIEW3.VIEW1.b]), filter(nil), rowset=16
      access([VIEW3.VIEW1.a], [VIEW3.VIEW1.b])
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      distinct([t2.a], [t2.b])
  7 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  8 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN ; MAX), 
      range_cond([t1.a = :0], [t1.b = :1])
  9 - output(nil), filter(nil), rowset=16
      access(nil), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN ; MAX), 
      range_cond([:2 = t3.a], [:3 = t3.b])
explain select * from t1 where (t1.a, t1.b) in (select t2.a, t2.b from t2 where (t2.a, t2.b) in (select t3.a, t3.b from t3));
Query Plan
===================================================================
|ID|OPERATOR                       |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------
|0 |PX COORDINATOR                 |        |1       |58          |
|1 |└─EXCHANGE OUT DISTR           |:EX10000|1       |58          |
|2 |  └─PX PARTITION ITERATOR      |        |1       |56          |
|3 |    └─NESTED-LOOP SEMI JOIN    |        |1       |56          |
|4 |      ├─TABLE FULL SCAN        |t1      |1       |53          |
|5 |      └─SUBPLAN SCAN           |VIEW2   |1       |64          |
|6 |        └─NESTED-LOOP JOIN     |        |1       |64          |
|7 |          ├─SUBPLAN SCAN       |VIEW3   |1       |53          |
|8 |          │ └─MERGE DISTINCT   |        |1       |53          |
|9 |          │   └─TABLE FULL SCAN|t3      |1       |53          |
|10|          └─TABLE RANGE SCAN   |t2      |1       |383         |
===================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t1.d)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      conds(nil), nl_params_([t1.a(:2)], [t1.b(:3)]), use_batch=false
  4 - output([t1.a], [t1.b], [t1.c], [t1.d]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.a], [t1.b], [t1.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
  5 - output(nil), filter(nil), rowset=16
      access(nil)
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      conds(nil), nl_params_([VIEW3.VIEW1.a(:4)], [VIEW3.VIEW1.b(:5)]), use_batch=false
  7 - output([VIEW3.VIEW1.a], [VIEW3.VIEW1.b]), filter(nil), rowset=16
      access([VIEW3.VIEW1.a], [VIEW3.VIEW1.b])
  8 - output([t3.a], [t3.b]), filter(nil), rowset=16
      distinct([t3.a], [t3.b])
  9 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.a], [t3.b], [t3.c]), range(MIN,MIN,MIN ; MAX,MAX,MAX)always true
 10 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p0sp[0-4], p1sp[0-4], p2sp[0-4], p3sp[0-4], p4sp[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.a], [t2.b], [t2.c]), range(MIN ; MAX), 
      range_cond([:2 = t2.a], [:3 = t2.b], [t2.a = :4], [t2.b = :5])
drop table if exists t1, t2, t3;
create table t1(a int, b int) partition by hash(a+1) partitions 5;
create table t2(a int, b int) partition by hash(a+1) partitions 5;
create table t3(a int, b int) partition by hash(a+2) partitions 5;
explain select * from t1, t2 where t1.a = t2.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH JOIN                  |        |1       |24          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |12          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |└─PX COORDINATOR           |        |1       |12          |
|6 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |12          |
|7 |    └─PX PARTITION ITERATOR|        |1       |11          |
|8 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t2.a], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
  6 - output([t2.a], [t2.b]), filter(nil), rowset=16
      dop=1
  7 - output([t2.a], [t2.b]), filter(nil), rowset=16
      force partition granule
  8 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1, t2 where t1.a + 1 = t2.a + 1;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |24          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |23          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH JOIN          |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a + 1 = t2.a + 1]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1, t3 where t1.a + 1 = t3.a + 2;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |24          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |23          |
|2 |  └─PX PARTITION ITERATOR|        |1       |22          |
|3 |    └─HASH JOIN          |        |1       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t3      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t1.b], [t3.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t1.b], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a + 1 = t3.a + 2]), other_conds(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1, t3 where t1.a = t3.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH JOIN                  |        |1       |24          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |12          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |└─PX COORDINATOR           |        |1       |12          |
|6 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |12          |
|7 |    └─PX PARTITION ITERATOR|        |1       |11          |
|8 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t3.a], [t3.b]), filter(nil), rowset=16
      equal_conds([t1.a = t3.a]), other_conds(nil)
  1 - output([t1.a], [t1.b]), filter(nil), rowset=16
  2 - output([t1.a], [t1.b]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a], [t1.b]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a], [t3.b]), filter(nil), rowset=16
  6 - output([t3.a], [t3.b]), filter(nil), rowset=16
      dop=1
  7 - output([t3.a], [t3.b]), filter(nil), rowset=16
      force partition granule
  8 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1, t2, t3 where t1.a + 1 = t2.a + 1 and t1.a + 1 = t3.a + 2;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |35          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─TABLE FULL SCAN  |t3      |1       |11          |
|5 |      └─HASH JOIN        |        |1       |22          |
|6 |        ├─TABLE FULL SCAN|t1      |1       |11          |
|7 |        └─TABLE FULL SCAN|t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t3.a], [t3.b], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t1.a], [t3.a], [t3.b], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a + 1 = t3.a + 2]), other_conds(nil)
  4 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t1.a], [t1.a + 1], [t2.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a + 1 = t2.a + 1]), other_conds(nil)
  6 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1, t2, t3 where t1.a + 1 = t2.a + 1 and t2.a + 1 = t3.a + 2;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|1       |35          |
|2 |  └─PX PARTITION ITERATOR|        |1       |33          |
|3 |    └─HASH JOIN          |        |1       |33          |
|4 |      ├─TABLE FULL SCAN  |t3      |1       |11          |
|5 |      └─HASH JOIN        |        |1       |22          |
|6 |        ├─TABLE FULL SCAN|t1      |1       |11          |
|7 |        └─TABLE FULL SCAN|t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t2.a, t2.b, t3.a, t3.b)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.a], [t3.a], [t3.b], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t2.a], [t3.a], [t3.b], [t1.a], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t2.a + 1 = t3.a + 2]), other_conds(nil)
  4 - output([t3.a], [t3.b]), filter(nil), rowset=16
      access([t3.a], [t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a], [t1.a], [t2.a + 1], [t1.b], [t2.b]), filter(nil), rowset=16
      equal_conds([t1.a + 1 = t2.a + 1]), other_conds(nil)
  6 - output([t1.a], [t1.b]), filter(nil), rowset=16
      access([t1.a], [t1.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.a], [t2.b]), filter(nil), rowset=16
      access([t2.a], [t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
create table t1(a int, b int, c int) partition by hash(a) partitions 5;
create table t2(a int, b int, c int) partition by hash(a) partitions 5;
create table t3(a int, b int, c int) partition by hash(a) partitions 5;
explain select a from t1 union distinct select a from t2;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |2       |23          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|2       |23          |
|2 |  └─PX PARTITION ITERATOR|        |2       |22          |
|3 |    └─HASH UNION DISTINCT|        |2       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([UNION([1])]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union distinct select a from t2;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |2       |15          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|2       |15          |
|2 |  └─HASH UNION DISTINCT          |        |2       |14          |
|3 |    ├─EXCHANGE IN DISTR          |        |1       |3           |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |3           |
|5 |    │   └─TABLE FULL SCAN        |t1      |1       |3           |
|6 |    └─PX PARTITION ITERATOR      |        |1       |11          |
|7 |      └─TABLE FULL SCAN          |t2      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      (#keys=1, [t1.a]), is_single, dop=1
  5 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter(nil), rowset=16
      affinitize, force partition granule
  7 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union distinct select a from t2 where a = 1;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |2       |15          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|2       |15          |
|2 |  └─HASH UNION DISTINCT          |        |2       |14          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN          |t1      |1       |11          |
|5 |    └─EXCHANGE IN DISTR          |        |1       |3           |
|6 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |3           |
|7 |        └─TABLE FULL SCAN        |t2      |1       |3           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
  6 - output([t2.a]), filter(nil), rowset=16
      (#keys=1, [t2.a]), is_single, dop=1
  7 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union distinct select a from t2 where a = 1;
Query Plan
====================================================
|ID|OPERATOR            |NAME|EST.ROWS|EST.TIME(us)|
----------------------------------------------------
|0 |MERGE UNION DISTINCT|    |2       |5           |
|1 |├─TABLE FULL SCAN   |t1  |1       |3           |
|2 |└─TABLE FULL SCAN   |t2  |1       |3           |
====================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union distinct select a from t2 union distinct select b from t3;
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |PX COORDINATOR                     |        |1       |33          |
|1 |└─EXCHANGE OUT DISTR               |:EX10001|1       |33          |
|2 |  └─HASH DISTINCT                  |        |1       |33          |
|3 |    └─EXCHANGE IN DISTR            |        |1       |33          |
|4 |      └─EXCHANGE OUT DISTR (HASH)  |:EX10000|1       |33          |
|5 |        └─HASH DISTINCT            |        |1       |33          |
|6 |          └─UNION ALL              |        |3       |32          |
|7 |            ├─PX PARTITION ITERATOR|        |1       |11          |
|8 |            │ └─TABLE FULL SCAN    |t1      |1       |11          |
|9 |            ├─PX PARTITION ITERATOR|        |1       |11          |
|10|            │ └─TABLE FULL SCAN    |t2      |1       |11          |
|11|            └─PX PARTITION ITERATOR|        |1       |11          |
|12|              └─TABLE FULL SCAN    |t3      |1       |11          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  3 - output([UNION([1])]), filter(nil), rowset=16
  4 - output([UNION([1])]), filter(nil), rowset=16
      (#keys=1, [UNION([1])]), dop=1
  5 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  6 - output([UNION([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  8 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t2.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 10 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t3.b]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 12 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union distinct select a from t2 union distinct select b from t3;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |25          |
|1 |└─UNION ALL                  |        |3       |25          |
|2 |  ├─TABLE FULL SCAN          |t1      |1       |3           |
|3 |  ├─PX COORDINATOR           |        |1       |12          |
|4 |  │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|5 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|6 |  │     └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |  └─PX COORDINATOR           |        |1       |12          |
|8 |    └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|9 |      └─PX PARTITION ITERATOR|        |1       |11          |
|10|        └─TABLE FULL SCAN    |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter(nil), rowset=16
  4 - output([t2.a]), filter(nil), rowset=16
      dop=1
  5 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.b]), filter(nil), rowset=16
  8 - output([t3.b]), filter(nil), rowset=16
      dop=1
  9 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 10 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union distinct select a from t2 where a = 1 union distinct select b from t3;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |25          |
|1 |└─UNION ALL                  |        |3       |25          |
|2 |  ├─PX COORDINATOR           |        |1       |12          |
|3 |  │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|5 |  │     └─TABLE FULL SCAN    |t1      |1       |11          |
|6 |  ├─TABLE FULL SCAN          |t2      |1       |3           |
|7 |  └─PX COORDINATOR           |        |1       |12          |
|8 |    └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|9 |      └─PX PARTITION ITERATOR|        |1       |11          |
|10|        └─TABLE FULL SCAN    |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      dop=1
  4 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.b]), filter(nil), rowset=16
  8 - output([t3.b]), filter(nil), rowset=16
      dop=1
  9 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 10 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union distinct select a from t2 where a = 1 union distinct select b from t3;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |16          |
|1 |└─UNION ALL                  |        |3       |16          |
|2 |  ├─TABLE FULL SCAN          |t1      |1       |3           |
|3 |  ├─TABLE FULL SCAN          |t2      |1       |3           |
|4 |  └─PX COORDINATOR           |        |1       |12          |
|5 |    └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |      └─PX PARTITION ITERATOR|        |1       |11          |
|7 |        └─TABLE FULL SCAN    |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select 1 a union distinct select a from t1 union distinct select a from t2;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |23          |
|1 |└─UNION ALL                  |        |3       |23          |
|2 |  ├─EXPRESSION               |        |1       |1           |
|3 |  ├─PX COORDINATOR           |        |1       |12          |
|4 |  │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|5 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|6 |  │     └─TABLE FULL SCAN    |t1      |1       |11          |
|7 |  └─PX COORDINATOR           |        |1       |12          |
|8 |    └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|9 |      └─PX PARTITION ITERATOR|        |1       |11          |
|10|        └─TABLE FULL SCAN    |t2      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([1]), filter(nil)
      values({1})
  3 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      dop=1
  5 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  6 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  8 - output([t2.a]), filter(nil), rowset=16
      dop=1
  9 - output([t2.a]), filter(nil), rowset=16
      force partition granule
 10 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union distinct select 1 a union distinct select a from t2;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |23          |
|1 |└─UNION ALL                  |        |3       |23          |
|2 |  ├─PX COORDINATOR           |        |1       |12          |
|3 |  │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|5 |  │     └─TABLE FULL SCAN    |t1      |1       |11          |
|6 |  ├─EXPRESSION               |        |1       |1           |
|7 |  └─PX COORDINATOR           |        |1       |12          |
|8 |    └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|9 |      └─PX PARTITION ITERATOR|        |1       |11          |
|10|        └─TABLE FULL SCAN    |t2      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      dop=1
  4 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([1]), filter(nil)
      values({1})
  7 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  8 - output([t2.a]), filter(nil), rowset=16
      dop=1
  9 - output([t2.a]), filter(nil), rowset=16
      force partition granule
 10 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union distinct select a from t2 union distinct select 1 a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH DISTINCT                |        |1       |23          |
|1 |└─UNION ALL                  |        |3       |23          |
|2 |  ├─PX COORDINATOR           |        |1       |12          |
|3 |  │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|5 |  │     └─TABLE FULL SCAN    |t1      |1       |11          |
|6 |  ├─PX COORDINATOR           |        |1       |12          |
|7 |  │ └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|8 |  │   └─PX PARTITION ITERATOR|        |1       |11          |
|9 |  │     └─TABLE FULL SCAN    |t2      |1       |11          |
|10|  └─EXPRESSION               |        |1       |1           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  1 - output([UNION([1])]), filter(nil), rowset=16
  2 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      dop=1
  4 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  7 - output([t2.a]), filter(nil), rowset=16
      dop=1
  8 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  9 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 10 - output([1]), filter(nil)
      values({1})
explain select * from (select a from t1 union distinct select a from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |35          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |33          |
|3 |    └─HASH JOIN              |        |1       |33          |
|4 |      ├─TABLE FULL SCAN      |t4      |1       |11          |
|5 |      └─SUBPLAN SCAN         |t3      |2       |22          |
|6 |        └─HASH UNION DISTINCT|        |2       |22          |
|7 |          ├─TABLE FULL SCAN  |t1      |1       |11          |
|8 |          └─TABLE FULL SCAN  |t2      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  4 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union distinct select a from t2 union distinct select a from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=============================================================================
|ID|OPERATOR                                 |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |PX COORDINATOR                           |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR                     |:EX10002|1       |46          |
|2 |  └─HASH JOIN                            |        |1       |44          |
|3 |    ├─EXCHANGE IN DISTR                  |        |1       |33          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)        |:EX10001|1       |33          |
|5 |    │   └─SUBPLAN SCAN                   |t4      |1       |33          |
|6 |    │     └─HASH DISTINCT                |        |1       |33          |
|7 |    │       └─EXCHANGE IN DISTR          |        |1       |33          |
|8 |    │         └─EXCHANGE OUT DISTR (HASH)|:EX10000|1       |33          |
|9 |    │           └─HASH DISTINCT          |        |1       |32          |
|10|    │             └─PX PARTITION ITERATOR|        |3       |32          |
|11|    │               └─UNION ALL          |        |3       |32          |
|12|    │                 ├─TABLE FULL SCAN  |t1      |1       |11          |
|13|    │                 ├─TABLE FULL SCAN  |t2      |1       |11          |
|14|    │                 └─TABLE FULL SCAN  |t3      |1       |11          |
|15|    └─PX PARTITION ITERATOR              |        |1       |11          |
|16|      └─TABLE FULL SCAN                  |t5      |1       |11          |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
  4 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), dop=1
  5 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  7 - output([UNION([1])]), filter(nil), rowset=16
  8 - output([UNION([1])]), filter(nil), rowset=16
      (#keys=1, [UNION([1])]), dop=1
  9 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
 10 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
 11 - output([UNION([1])]), filter(nil), rowset=16
 12 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 14 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
 16 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union distinct select a from t2 union distinct select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
===============================================================================
|ID|OPERATOR                                   |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------------
|0 |PX COORDINATOR                             |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR                       |:EX10002|1       |46          |
|2 |  └─HASH JOIN                              |        |1       |44          |
|3 |    ├─EXCHANGE IN DISTR                    |        |1       |33          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)          |:EX10001|1       |33          |
|5 |    │   └─SUBPLAN SCAN                     |t4      |1       |33          |
|6 |    │     └─HASH DISTINCT                  |        |1       |33          |
|7 |    │       └─EXCHANGE IN DISTR            |        |1       |33          |
|8 |    │         └─EXCHANGE OUT DISTR (HASH)  |:EX10000|1       |33          |
|9 |    │           └─HASH DISTINCT            |        |1       |33          |
|10|    │             └─UNION ALL              |        |3       |32          |
|11|    │               ├─PX PARTITION ITERATOR|        |1       |11          |
|12|    │               │ └─TABLE FULL SCAN    |t1      |1       |11          |
|13|    │               ├─PX PARTITION ITERATOR|        |1       |11          |
|14|    │               │ └─TABLE FULL SCAN    |t2      |1       |11          |
|15|    │               └─PX PARTITION ITERATOR|        |1       |11          |
|16|    │                 └─TABLE FULL SCAN    |t3      |1       |11          |
|17|    └─PX PARTITION ITERATOR                |        |1       |11          |
|18|      └─TABLE FULL SCAN                    |t5      |1       |11          |
===============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
  4 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), dop=1
  5 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  7 - output([UNION([1])]), filter(nil), rowset=16
  8 - output([UNION([1])]), filter(nil), rowset=16
      (#keys=1, [UNION([1])]), dop=1
  9 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
 10 - output([UNION([1])]), filter(nil), rowset=16
 11 - output([t1.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 12 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t2.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 14 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 15 - output([t3.b]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 16 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
 18 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union distinct select 1 a union distinct select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=============================================================================
|ID|OPERATOR                                 |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |PX COORDINATOR                           |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR                     |:EX10003|1       |36          |
|2 |  └─HASH JOIN                            |        |1       |34          |
|3 |    ├─EXCHANGE IN DISTR                  |        |1       |23          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)        |:EX10002|1       |23          |
|5 |    │   └─SUBPLAN SCAN                   |t4      |1       |23          |
|6 |    │     └─HASH DISTINCT                |        |1       |23          |
|7 |    │       └─UNION ALL                  |        |3       |23          |
|8 |    │         ├─EXCHANGE IN DISTR        |        |1       |12          |
|9 |    │         │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|10|    │         │   └─PX PARTITION ITERATOR|        |1       |11          |
|11|    │         │     └─TABLE FULL SCAN    |t1      |1       |11          |
|12|    │         ├─EXPRESSION               |        |1       |1           |
|13|    │         └─EXCHANGE IN DISTR        |        |1       |12          |
|14|    │           └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|15|    │             └─PX PARTITION ITERATOR|        |1       |11          |
|16|    │               └─TABLE FULL SCAN    |t3      |1       |11          |
|17|    └─PX PARTITION ITERATOR              |        |1       |11          |
|18|      └─TABLE FULL SCAN                  |t5      |1       |11          |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
  4 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), is_single, dop=1
  5 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  7 - output([UNION([1])]), filter(nil), rowset=16
  8 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([t1.a]), filter(nil), rowset=16
      dop=1
 10 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 11 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 12 - output([1]), filter(nil)
      values({1})
 13 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
 14 - output([t3.b]), filter(nil), rowset=16
      dop=1
 15 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 16 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
 18 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 a union distinct select a from t1 union distinct select b from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=============================================================================
|ID|OPERATOR                                 |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |PX COORDINATOR                           |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR                     |:EX10003|1       |36          |
|2 |  └─HASH JOIN                            |        |1       |34          |
|3 |    ├─EXCHANGE IN DISTR                  |        |1       |23          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)        |:EX10002|1       |23          |
|5 |    │   └─SUBPLAN SCAN                   |t3      |1       |23          |
|6 |    │     └─HASH DISTINCT                |        |1       |23          |
|7 |    │       └─UNION ALL                  |        |3       |23          |
|8 |    │         ├─EXPRESSION               |        |1       |1           |
|9 |    │         ├─EXCHANGE IN DISTR        |        |1       |12          |
|10|    │         │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|11|    │         │   └─PX PARTITION ITERATOR|        |1       |11          |
|12|    │         │     └─TABLE FULL SCAN    |t1      |1       |11          |
|13|    │         └─EXCHANGE IN DISTR        |        |1       |12          |
|14|    │           └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|15|    │             └─PX PARTITION ITERATOR|        |1       |11          |
|16|    │               └─TABLE FULL SCAN    |t2      |1       |11          |
|17|    └─PX PARTITION ITERATOR              |        |1       |11          |
|18|      └─TABLE FULL SCAN                  |t4      |1       |11          |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t3.a]), filter(nil), rowset=16
  4 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), is_single, dop=1
  5 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  7 - output([UNION([1])]), filter(nil), rowset=16
  8 - output([1]), filter(nil)
      values({1})
  9 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
 10 - output([t1.a]), filter(nil), rowset=16
      dop=1
 11 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 12 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
 14 - output([t2.b]), filter(nil), rowset=16
      dop=1
 15 - output([t2.b]), filter(nil), rowset=16
      force partition granule
 16 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
 18 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union distinct select a from t2 union distinct select 1 a) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=============================================================================
|ID|OPERATOR                                 |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |PX COORDINATOR                           |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR                     |:EX10003|1       |36          |
|2 |  └─HASH JOIN                            |        |1       |34          |
|3 |    ├─EXCHANGE IN DISTR                  |        |1       |23          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)        |:EX10002|1       |23          |
|5 |    │   └─SUBPLAN SCAN                   |t3      |1       |23          |
|6 |    │     └─HASH DISTINCT                |        |1       |23          |
|7 |    │       └─UNION ALL                  |        |3       |23          |
|8 |    │         ├─EXCHANGE IN DISTR        |        |1       |12          |
|9 |    │         │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|10|    │         │   └─PX PARTITION ITERATOR|        |1       |11          |
|11|    │         │     └─TABLE FULL SCAN    |t1      |1       |11          |
|12|    │         ├─EXCHANGE IN DISTR        |        |1       |12          |
|13|    │         │ └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|14|    │         │   └─PX PARTITION ITERATOR|        |1       |11          |
|15|    │         │     └─TABLE FULL SCAN    |t2      |1       |11          |
|16|    │         └─EXPRESSION               |        |1       |1           |
|17|    └─PX PARTITION ITERATOR              |        |1       |11          |
|18|      └─TABLE FULL SCAN                  |t4      |1       |11          |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t3.a]), filter(nil), rowset=16
  4 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), is_single, dop=1
  5 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
      distinct([UNION([1])])
  7 - output([UNION([1])]), filter(nil), rowset=16
  8 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([t1.a]), filter(nil), rowset=16
      dop=1
 10 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 11 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 12 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
 13 - output([t2.a]), filter(nil), rowset=16
      dop=1
 14 - output([t2.a]), filter(nil), rowset=16
      force partition granule
 15 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 16 - output([1]), filter(nil)
      values({1})
 17 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
 18 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select t2.a from t1, t2 where t1.a = t2.a union distinct select a from t1 as t3) as t4, t2 as t5 where t4.a = t5.a;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |45          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |44          |
|3 |    └─HASH JOIN              |        |1       |44          |
|4 |      ├─TABLE FULL SCAN      |t5      |1       |11          |
|5 |      └─SUBPLAN SCAN         |t4      |2       |33          |
|6 |        └─HASH UNION DISTINCT|        |2       |33          |
|7 |          ├─HASH JOIN        |        |1       |22          |
|8 |          │ ├─TABLE FULL SCAN|t1      |1       |11          |
|9 |          │ └─TABLE FULL SCAN|t2      |1       |11          |
|10|          └─TABLE FULL SCAN  |t3      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  4 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  6 - output([UNION([1])]), filter(nil), rowset=16
  7 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  8 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select a from t2;
Query Plan
=============================================================
|ID|OPERATOR                 |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------
|0 |PX COORDINATOR           |        |2       |23          |
|1 |└─EXCHANGE OUT DISTR     |:EX10000|2       |22          |
|2 |  └─PX PARTITION ITERATOR|        |2       |22          |
|3 |    └─UNION ALL          |        |2       |22          |
|4 |      ├─TABLE FULL SCAN  |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN  |t2      |1       |11          |
=============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([UNION([1])]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union all select a from t2;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |2       |14          |
|1 |├─TABLE FULL SCAN          |t1      |1       |3           |
|2 |└─PX COORDINATOR           |        |1       |12          |
|3 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |    └─PX PARTITION ITERATOR|        |1       |11          |
|5 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter(nil), rowset=16
  3 - output([t2.a]), filter(nil), rowset=16
      dop=1
  4 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select a from t2 where a = 1;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |2       |14          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |└─TABLE FULL SCAN          |t2      |1       |3           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter(nil), rowset=16
  2 - output([t1.a]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union all select a from t2 where a = 1;
Query Plan
=================================================
|ID|OPERATOR         |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------
|0 |UNION ALL        |    |2       |5           |
|1 |├─TABLE FULL SCAN|t1  |1       |3           |
|2 |└─TABLE FULL SCAN|t2  |1       |3           |
=================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select a from t2 union all select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |3       |34          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|3       |33          |
|2 |  └─UNION ALL              |        |3       |32          |
|3 |    ├─PX PARTITION ITERATOR|        |1       |11          |
|4 |    │ └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |    ├─PX PARTITION ITERATOR|        |1       |11          |
|6 |    │ └─TABLE FULL SCAN    |t2      |1       |11          |
|7 |    └─PX PARTITION ITERATOR|        |1       |11          |
|8 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(UNION([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([UNION([1])]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.b]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  8 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union all select a from t2 union all select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |25          |
|1 |├─TABLE FULL SCAN          |t1      |1       |3           |
|2 |├─PX COORDINATOR           |        |1       |12          |
|3 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|5 |│     └─TABLE FULL SCAN    |t2      |1       |11          |
|6 |└─PX COORDINATOR           |        |1       |12          |
|7 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|8 |    └─PX PARTITION ITERATOR|        |1       |11          |
|9 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter(nil), rowset=16
  3 - output([t2.a]), filter(nil), rowset=16
      dop=1
  4 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t3.b]), filter(nil), rowset=16
  7 - output([t3.b]), filter(nil), rowset=16
      dop=1
  8 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  9 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select a from t2 where a = 1 union all select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |25          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |├─TABLE FULL SCAN          |t2      |1       |3           |
|6 |└─PX COORDINATOR           |        |1       |12          |
|7 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|8 |    └─PX PARTITION ITERATOR|        |1       |11          |
|9 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter(nil), rowset=16
  2 - output([t1.a]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t3.b]), filter(nil), rowset=16
  7 - output([t3.b]), filter(nil), rowset=16
      dop=1
  8 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  9 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 union all select a from t2 where a = 1 union all select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |16          |
|1 |├─TABLE FULL SCAN          |t1      |1       |3           |
|2 |├─TABLE FULL SCAN          |t2      |1       |3           |
|3 |└─PX COORDINATOR           |        |1       |12          |
|4 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|5 |    └─PX PARTITION ITERATOR|        |1       |11          |
|6 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t3.b]), filter(nil), rowset=16
  4 - output([t3.b]), filter(nil), rowset=16
      dop=1
  5 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  6 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select 1 a union all select a from t1 union all select a from t2;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |23          |
|1 |├─EXPRESSION               |        |1       |1           |
|2 |├─PX COORDINATOR           |        |1       |12          |
|3 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|4 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|5 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|6 |└─PX COORDINATOR           |        |1       |12          |
|7 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|8 |    └─PX PARTITION ITERATOR|        |1       |11          |
|9 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([1]), filter(nil)
      values({1})
  2 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      dop=1
  4 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  7 - output([t2.a]), filter(nil), rowset=16
      dop=1
  8 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  9 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select 1 a union all select a from t2;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |23          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |├─EXPRESSION               |        |1       |1           |
|6 |└─PX COORDINATOR           |        |1       |12          |
|7 |  └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|8 |    └─PX PARTITION ITERATOR|        |1       |11          |
|9 |      └─TABLE FULL SCAN    |t2      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  2 - output([t1.a]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([1]), filter(nil)
      values({1})
  6 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  7 - output([t2.a]), filter(nil), rowset=16
      dop=1
  8 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  9 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 union all select a from t2 union all select 1 a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |UNION ALL                  |        |3       |23          |
|1 |├─PX COORDINATOR           |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|3 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|4 |│     └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |├─PX COORDINATOR           |        |1       |12          |
|6 |│ └─EXCHANGE OUT DISTR     |:EX20000|1       |11          |
|7 |│   └─PX PARTITION ITERATOR|        |1       |11          |
|8 |│     └─TABLE FULL SCAN    |t2      |1       |11          |
|9 |└─EXPRESSION               |        |1       |1           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=16
  1 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
  2 - output([t1.a]), filter(nil), rowset=16
      dop=1
  3 - output([t1.a]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  6 - output([t2.a]), filter(nil), rowset=16
      dop=1
  7 - output([t2.a]), filter(nil), rowset=16
      force partition granule
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([1]), filter(nil)
      values({1})
explain select * from (select a from t1 union all select a from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |35          |
|2 |  └─HASH JOIN                    |        |1       |34          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN          |t4      |1       |11          |
|5 |    └─EXCHANGE IN DISTR          |        |2       |23          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|2       |22          |
|7 |        └─SUBPLAN SCAN           |t3      |2       |22          |
|8 |          └─PX PARTITION ITERATOR|        |2       |22          |
|9 |            └─UNION ALL          |        |2       |22          |
|10|              ├─TABLE FULL SCAN  |t1      |1       |11          |
|11|              └─TABLE FULL SCAN  |t2      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a]), filter(nil), rowset=16
  6 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), dop=1
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  9 - output([UNION([1])]), filter(nil), rowset=16
 10 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union all select a from t2 union all select a from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |47          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |46          |
|2 |  └─HASH JOIN                    |        |1       |45          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN          |t5      |1       |11          |
|5 |    └─EXCHANGE IN DISTR          |        |3       |34          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|3       |33          |
|7 |        └─SUBPLAN SCAN           |t4      |3       |32          |
|8 |          └─PX PARTITION ITERATOR|        |3       |32          |
|9 |            └─UNION ALL          |        |3       |32          |
|10|              ├─TABLE FULL SCAN  |t1      |1       |11          |
|11|              ├─TABLE FULL SCAN  |t2      |1       |11          |
|12|              └─TABLE FULL SCAN  |t3      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t4.a]), filter(nil), rowset=16
  6 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), dop=1
  7 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  9 - output([UNION([1])]), filter(nil), rowset=16
 10 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union all select a from t2 union all select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |PX COORDINATOR                     |        |1       |47          |
|1 |└─EXCHANGE OUT DISTR               |:EX10001|1       |46          |
|2 |  └─HASH JOIN                      |        |1       |45          |
|3 |    ├─PX PARTITION ITERATOR        |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN            |t5      |1       |11          |
|5 |    └─EXCHANGE IN DISTR            |        |3       |34          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)  |:EX10000|3       |33          |
|7 |        └─SUBPLAN SCAN             |t4      |3       |32          |
|8 |          └─UNION ALL              |        |3       |32          |
|9 |            ├─PX PARTITION ITERATOR|        |1       |11          |
|10|            │ └─TABLE FULL SCAN    |t1      |1       |11          |
|11|            ├─PX PARTITION ITERATOR|        |1       |11          |
|12|            │ └─TABLE FULL SCAN    |t2      |1       |11          |
|13|            └─PX PARTITION ITERATOR|        |1       |11          |
|14|              └─TABLE FULL SCAN    |t3      |1       |11          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t4.a]), filter(nil), rowset=16
  6 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), dop=1
  7 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
  9 - output([t1.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 10 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 11 - output([t2.a]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 12 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t3.b]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 14 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union all select 1 a union all select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
===========================================================================
|ID|OPERATOR                               |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |PX COORDINATOR                         |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR                   |:EX10003|1       |37          |
|2 |  └─HASH JOIN                          |        |1       |35          |
|3 |    ├─PX PARTITION ITERATOR            |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN                |t5      |1       |11          |
|5 |    └─EXCHANGE IN DISTR                |        |3       |24          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)      |:EX10002|3       |24          |
|7 |        └─SUBPLAN SCAN                 |t4      |3       |23          |
|8 |          └─UNION ALL                  |        |3       |23          |
|9 |            ├─EXCHANGE IN DISTR        |        |1       |12          |
|10|            │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|11|            │   └─PX PARTITION ITERATOR|        |1       |11          |
|12|            │     └─TABLE FULL SCAN    |t1      |1       |11          |
|13|            ├─EXPRESSION               |        |1       |1           |
|14|            └─EXCHANGE IN DISTR        |        |1       |12          |
|15|              └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|16|                └─PX PARTITION ITERATOR|        |1       |11          |
|17|                  └─TABLE FULL SCAN    |t3      |1       |11          |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t4.a]), filter(nil), rowset=16
  6 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), is_single, dop=1
  7 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
  9 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
 10 - output([t1.a]), filter(nil), rowset=16
      dop=1
 11 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 12 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([1]), filter(nil)
      values({1})
 14 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
 15 - output([t3.b]), filter(nil), rowset=16
      dop=1
 16 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 17 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 a union all select a from t1 union all select b from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
===========================================================================
|ID|OPERATOR                               |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |PX COORDINATOR                         |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR                   |:EX10003|1       |37          |
|2 |  └─HASH JOIN                          |        |1       |35          |
|3 |    ├─PX PARTITION ITERATOR            |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN                |t4      |1       |11          |
|5 |    └─EXCHANGE IN DISTR                |        |3       |24          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)      |:EX10002|3       |24          |
|7 |        └─SUBPLAN SCAN                 |t3      |3       |23          |
|8 |          └─UNION ALL                  |        |3       |23          |
|9 |            ├─EXPRESSION               |        |1       |1           |
|10|            ├─EXCHANGE IN DISTR        |        |1       |12          |
|11|            │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|12|            │   └─PX PARTITION ITERATOR|        |1       |11          |
|13|            │     └─TABLE FULL SCAN    |t1      |1       |11          |
|14|            └─EXCHANGE IN DISTR        |        |1       |12          |
|15|              └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|16|                └─PX PARTITION ITERATOR|        |1       |11          |
|17|                  └─TABLE FULL SCAN    |t2      |1       |11          |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a]), filter(nil), rowset=16
  6 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), is_single, dop=1
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
  9 - output([1]), filter(nil)
      values({1})
 10 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
 11 - output([t1.a]), filter(nil), rowset=16
      dop=1
 12 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 13 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 14 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
 15 - output([t2.b]), filter(nil), rowset=16
      dop=1
 16 - output([t2.b]), filter(nil), rowset=16
      force partition granule
 17 - output([t2.b]), filter(nil), rowset=16
      access([t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 union all select a from t2 union all select 1 a) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
===========================================================================
|ID|OPERATOR                               |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------------
|0 |PX COORDINATOR                         |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR                   |:EX10003|1       |37          |
|2 |  └─HASH JOIN                          |        |1       |35          |
|3 |    ├─PX PARTITION ITERATOR            |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN                |t4      |1       |11          |
|5 |    └─EXCHANGE IN DISTR                |        |3       |24          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)      |:EX10002|3       |24          |
|7 |        └─SUBPLAN SCAN                 |t3      |3       |23          |
|8 |          └─UNION ALL                  |        |3       |23          |
|9 |            ├─EXCHANGE IN DISTR        |        |1       |12          |
|10|            │ └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|11|            │   └─PX PARTITION ITERATOR|        |1       |11          |
|12|            │     └─TABLE FULL SCAN    |t1      |1       |11          |
|13|            ├─EXCHANGE IN DISTR        |        |1       |12          |
|14|            │ └─EXCHANGE OUT DISTR     |:EX10001|1       |11          |
|15|            │   └─PX PARTITION ITERATOR|        |1       |11          |
|16|            │     └─TABLE FULL SCAN    |t2      |1       |11          |
|17|            └─EXPRESSION               |        |1       |1           |
===========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t3.a]), filter(nil), rowset=16
  6 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), is_single, dop=1
  7 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
  9 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
 10 - output([t1.a]), filter(nil), rowset=16
      dop=1
 11 - output([t1.a]), filter(nil), rowset=16
      force partition granule
 12 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 13 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
 14 - output([t2.a]), filter(nil), rowset=16
      dop=1
 15 - output([t2.a]), filter(nil), rowset=16
      force partition granule
 16 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 17 - output([1]), filter(nil)
      values({1})
explain select * from (select t2.a from t1, t2 where t1.a = t2.a union all select a from t1 as t3) as t4, t2 as t5 where t4.a = t5.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |46          |
|2 |  └─HASH JOIN                    |        |1       |44          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN          |t5      |1       |11          |
|5 |    └─EXCHANGE IN DISTR          |        |2       |33          |
|6 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|2       |33          |
|7 |        └─SUBPLAN SCAN           |t4      |2       |32          |
|8 |          └─PX PARTITION ITERATOR|        |2       |32          |
|9 |            └─UNION ALL          |        |2       |32          |
|10|              ├─HASH JOIN        |        |1       |22          |
|11|              │ ├─TABLE FULL SCAN|t1      |1       |11          |
|12|              │ └─TABLE FULL SCAN|t2      |1       |11          |
|13|              └─TABLE FULL SCAN  |t3      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t4.a]), filter(nil), rowset=16
  6 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), dop=1
  7 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  8 - output([UNION([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  9 - output([UNION([1])]), filter(nil), rowset=16
 10 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
 11 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 12 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select a from t2;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |PX COORDINATOR               |        |1       |22          |
|1 |└─EXCHANGE OUT DISTR         |:EX10000|1       |22          |
|2 |  └─PX PARTITION ITERATOR    |        |1       |22          |
|3 |    └─HASH INTERSECT DISTINCT|        |1       |22          |
|4 |      ├─TABLE FULL SCAN      |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN      |t2      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(INTERSECT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(INTERSECT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([INTERSECT([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([INTERSECT([1])]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 intersect select a from t2;
Query Plan
========================================================
|ID|OPERATOR                |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT|    |1       |5           |
|1 |├─TABLE FULL SCAN       |t1  |1       |3           |
|2 |└─TABLE FULL SCAN       |t2  |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select a from t2 where a = 1;
Query Plan
========================================================
|ID|OPERATOR                |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT|    |1       |5           |
|1 |├─TABLE FULL SCAN       |t1  |1       |3           |
|2 |└─TABLE FULL SCAN       |t2  |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 intersect select a from t2 where a = 1;
Query Plan
========================================================
|ID|OPERATOR                |NAME|EST.ROWS|EST.TIME(us)|
--------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT|    |1       |5           |
|1 |├─TABLE FULL SCAN       |t1  |1       |3           |
|2 |└─TABLE FULL SCAN       |t2  |1       |3           |
========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select a from t2 intersect select b from t3;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |34          |
|2 |  └─HASH INTERSECT DISTINCT      |        |1       |33          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |22          |
|4 |    │ └─HASH INTERSECT DISTINCT  |        |1       |22          |
|5 |    │   ├─TABLE FULL SCAN        |t1      |1       |11          |
|6 |    │   └─TABLE FULL SCAN        |t2      |1       |11          |
|7 |    └─EXCHANGE IN DISTR          |        |1       |12          |
|8 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |11          |
|9 |        └─PX PARTITION ITERATOR  |        |1       |11          |
|10|          └─TABLE FULL SCAN      |t3      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(INTERSECT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(INTERSECT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([INTERSECT([1])]), filter(nil), rowset=16
  3 - output([INTERSECT([1])]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  4 - output([INTERSECT([1])]), filter(nil), rowset=16
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.b]), filter(nil), rowset=16
  8 - output([t3.b]), filter(nil), rowset=16
      (#keys=1, [t3.b]), dop=1
  9 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 10 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 intersect select a from t2 intersect select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH INTERSECT DISTINCT    |        |1       |16          |
|1 |├─MERGE INTERSECT DISTINCT |        |1       |5           |
|2 |│ ├─TABLE FULL SCAN        |t1      |1       |3           |
|3 |│ └─TABLE FULL SCAN        |t2      |1       |3           |
|4 |└─PX COORDINATOR           |        |1       |12          |
|5 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |    └─PX PARTITION ITERATOR|        |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([INTERSECT([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter([t3.b = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select a from t2 where a = 1 intersect select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH INTERSECT DISTINCT    |        |1       |16          |
|1 |├─MERGE INTERSECT DISTINCT |        |1       |5           |
|2 |│ ├─TABLE FULL SCAN        |t1      |1       |3           |
|3 |│ └─TABLE FULL SCAN        |t2      |1       |3           |
|4 |└─PX COORDINATOR           |        |1       |12          |
|5 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |    └─PX PARTITION ITERATOR|        |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([INTERSECT([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter([t3.b = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 intersect select a from t2 where a = 1 intersect select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH INTERSECT DISTINCT    |        |1       |16          |
|1 |├─MERGE INTERSECT DISTINCT |        |1       |5           |
|2 |│ ├─TABLE FULL SCAN        |t1      |1       |3           |
|3 |│ └─TABLE FULL SCAN        |t2      |1       |3           |
|4 |└─PX COORDINATOR           |        |1       |12          |
|5 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |    └─PX PARTITION ITERATOR|        |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([INTERSECT([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter([t3.b = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select 1 a intersect select a from t1 intersect select a from t2;
Query Plan
==========================================================
|ID|OPERATOR                  |NAME|EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT  |    |1       |5           |
|1 |├─MERGE INTERSECT DISTINCT|    |1       |3           |
|2 |│ ├─TABLE FULL SCAN       |t1  |1       |3           |
|3 |│ └─EXPRESSION            |    |1       |1           |
|4 |└─TABLE FULL SCAN         |t2  |1       |3           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([INTERSECT([1])]), filter(nil), rowset=16
  2 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil)
      values({1})
  4 - output([cast(t2.a, BIGINT(20, 0))]), filter([cast(t2.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select 1 a intersect select a from t2;
Query Plan
==========================================================
|ID|OPERATOR                  |NAME|EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT  |    |1       |5           |
|1 |├─MERGE INTERSECT DISTINCT|    |1       |3           |
|2 |│ ├─TABLE FULL SCAN       |t1  |1       |3           |
|3 |│ └─EXPRESSION            |    |1       |1           |
|4 |└─TABLE FULL SCAN         |t2  |1       |3           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([INTERSECT([1])]), filter(nil), rowset=16
  2 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([1]), filter(nil)
      values({1})
  4 - output([cast(t2.a, BIGINT(20, 0))]), filter([cast(t2.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 intersect select a from t2 intersect select 1 a;
Query Plan
==========================================================
|ID|OPERATOR                  |NAME|EST.ROWS|EST.TIME(us)|
----------------------------------------------------------
|0 |MERGE INTERSECT DISTINCT  |    |1       |5           |
|1 |├─MERGE INTERSECT DISTINCT|    |1       |5           |
|2 |│ ├─TABLE FULL SCAN       |t1  |1       |3           |
|3 |│ └─TABLE FULL SCAN       |t2  |1       |3           |
|4 |└─EXPRESSION              |    |1       |1           |
==========================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])]), filter(nil), rowset=16
  1 - output([cast(INTERSECT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
  2 - output([t1.a]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([cast(t2.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([1]), filter(nil)
      values({1})
explain select * from (select a from t1 intersect select a from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |35          |
|1 |└─EXCHANGE OUT DISTR             |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR        |        |1       |33          |
|3 |    └─HASH JOIN                  |        |1       |33          |
|4 |      ├─SUBPLAN SCAN             |t3      |1       |22          |
|5 |      │ └─HASH INTERSECT DISTINCT|        |1       |22          |
|6 |      │   ├─TABLE FULL SCAN      |t1      |1       |11          |
|7 |      │   └─TABLE FULL SCAN      |t2      |1       |11          |
|8 |      └─TABLE FULL SCAN          |t4      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
  6 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 intersect select a from t2 intersect select a from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |PX COORDINATOR                     |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR               |:EX10000|1       |45          |
|2 |  └─PX PARTITION ITERATOR          |        |1       |44          |
|3 |    └─HASH JOIN                    |        |1       |44          |
|4 |      ├─SUBPLAN SCAN               |t4      |1       |33          |
|5 |      │ └─HASH INTERSECT DISTINCT  |        |1       |33          |
|6 |      │   ├─HASH INTERSECT DISTINCT|        |1       |22          |
|7 |      │   │ ├─TABLE FULL SCAN      |t1      |1       |11          |
|8 |      │   │ └─TABLE FULL SCAN      |t2      |1       |11          |
|9 |      │   └─TABLE FULL SCAN        |t3      |1       |11          |
|10|      └─TABLE FULL SCAN            |t5      |1       |11          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  4 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
  6 - output([INTERSECT([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 intersect select a from t2 intersect select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |PX COORDINATOR                       |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR                 |:EX10001|1       |46          |
|2 |  └─HASH JOIN                        |        |1       |44          |
|3 |    ├─SUBPLAN SCAN                   |t4      |1       |33          |
|4 |    │ └─HASH INTERSECT DISTINCT      |        |1       |33          |
|5 |    │   ├─PX PARTITION ITERATOR      |        |1       |22          |
|6 |    │   │ └─HASH INTERSECT DISTINCT  |        |1       |22          |
|7 |    │   │   ├─TABLE FULL SCAN        |t1      |1       |11          |
|8 |    │   │   └─TABLE FULL SCAN        |t2      |1       |11          |
|9 |    │   └─EXCHANGE IN DISTR          |        |1       |12          |
|10|    │     └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |11          |
|11|    │       └─PX PARTITION ITERATOR  |        |1       |11          |
|12|    │         └─TABLE FULL SCAN      |t3      |1       |11          |
|13|    └─PX PARTITION ITERATOR          |        |1       |11          |
|14|      └─TABLE FULL SCAN              |t5      |1       |11          |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  4 - output([INTERSECT([1])]), filter(nil), rowset=16
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  6 - output([INTERSECT([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.b]), filter(nil), rowset=16
 10 - output([t3.b]), filter(nil), rowset=16
      (#keys=1, [t3.b]), dop=1
 11 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 12 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 14 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 intersect select 1 a intersect select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN       |        |1       |3           |
|1 |├─TABLE FULL SCAN                |t5      |1       |3           |
|2 |└─MATERIAL                       |        |1       |14          |
|3 |  └─SUBPLAN SCAN                 |t4      |1       |14          |
|4 |    └─HASH INTERSECT DISTINCT    |        |1       |14          |
|5 |      ├─MERGE INTERSECT DISTINCT |        |1       |3           |
|6 |      │ ├─TABLE FULL SCAN        |t1      |1       |3           |
|7 |      │ └─EXPRESSION             |        |1       |1           |
|8 |      └─PX COORDINATOR           |        |1       |12          |
|9 |        └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|10|          └─PX PARTITION ITERATOR|        |1       |11          |
|11|            └─TABLE FULL SCAN    |t3      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t5.a], [t5.b], [t5.c]), filter([t5.a = 1]), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t4.a]), filter(nil), rowset=16
  3 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  4 - output([INTERSECT([1])]), filter(nil), rowset=16
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
  6 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([1]), filter(nil)
      values({1})
  8 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
      dop=1
 10 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
      force partition granule
 11 - output([cast(t3.b, BIGINT(20, 0))]), filter([cast(t3.b, BIGINT(20, 0)) = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 a intersect select a from t1 intersect select b from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN       |        |1       |3           |
|1 |├─TABLE FULL SCAN                |t4      |1       |3           |
|2 |└─MATERIAL                       |        |1       |14          |
|3 |  └─SUBPLAN SCAN                 |t3      |1       |14          |
|4 |    └─HASH INTERSECT DISTINCT    |        |1       |14          |
|5 |      ├─MERGE INTERSECT DISTINCT |        |1       |3           |
|6 |      │ ├─TABLE FULL SCAN        |t1      |1       |3           |
|7 |      │ └─EXPRESSION             |        |1       |1           |
|8 |      └─PX COORDINATOR           |        |1       |12          |
|9 |        └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|10|          └─PX PARTITION ITERATOR|        |1       |11          |
|11|            └─TABLE FULL SCAN    |t2      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t4.a], [t4.b], [t4.c]), filter([t4.a = 1]), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.a]), filter(nil), rowset=16
  3 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  4 - output([INTERSECT([1])]), filter(nil), rowset=16
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
  6 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([1]), filter(nil)
      values({1})
  8 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
      dop=1
 10 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
      force partition granule
 11 - output([cast(t2.b, BIGINT(20, 0))]), filter([cast(t2.b, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 intersect select a from t2 intersect select 1 a) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
================================================================
|ID|OPERATOR                        |NAME|EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN      |    |1       |3           |
|1 |├─TABLE FULL SCAN               |t4  |1       |3           |
|2 |└─MATERIAL                      |    |1       |5           |
|3 |  └─SUBPLAN SCAN                |t3  |1       |5           |
|4 |    └─MERGE INTERSECT DISTINCT  |    |1       |5           |
|5 |      ├─MERGE INTERSECT DISTINCT|    |1       |5           |
|6 |      │ ├─TABLE FULL SCAN       |t1  |1       |3           |
|7 |      │ └─TABLE FULL SCAN       |t2  |1       |3           |
|8 |      └─EXPRESSION              |    |1       |1           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t4.a], [t4.b], [t4.c]), filter([1 = t4.a]), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.a]), filter(nil), rowset=16
  3 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  4 - output([INTERSECT([1])]), filter(nil), rowset=16
  5 - output([cast(INTERSECT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
  6 - output([t1.a]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.a]), filter([cast(t2.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([1]), filter(nil)
      values({1})
explain select * from (select t2.a from t1, t2 where t1.a = t2.a intersect select a from t1 as t3) as t4, t2 as t5 where t4.a = t5.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR             |:EX10000|1       |45          |
|2 |  └─PX PARTITION ITERATOR        |        |1       |44          |
|3 |    └─HASH JOIN                  |        |1       |44          |
|4 |      ├─SUBPLAN SCAN             |t4      |1       |33          |
|5 |      │ └─HASH INTERSECT DISTINCT|        |1       |33          |
|6 |      │   ├─HASH JOIN            |        |1       |22          |
|7 |      │   │ ├─TABLE FULL SCAN    |t1      |1       |11          |
|8 |      │   │ └─TABLE FULL SCAN    |t2      |1       |11          |
|9 |      │   └─TABLE FULL SCAN      |t3      |1       |11          |
|10|      └─TABLE FULL SCAN          |t5      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  4 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  5 - output([INTERSECT([1])]), filter(nil), rowset=16
  6 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select a from t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME    |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------
|0 |PX COORDINATOR            |        |1       |22          |
|1 |└─EXCHANGE OUT DISTR      |:EX10000|1       |22          |
|2 |  └─PX PARTITION ITERATOR |        |1       |22          |
|3 |    └─HASH EXCEPT DISTINCT|        |1       |22          |
|4 |      ├─TABLE FULL SCAN   |t1      |1       |11          |
|5 |      └─TABLE FULL SCAN   |t2      |1       |11          |
==============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([EXCEPT([1])]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 except select a from t2;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE EXCEPT DISTINCT|    |1       |5           |
|1 |├─TABLE FULL SCAN    |t1  |1       |3           |
|2 |└─TABLE FULL SCAN    |t2  |1       |3           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select a from t2 where a = 1;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |14          |
|2 |  └─HASH EXCEPT DISTINCT         |        |1       |14          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |11          |
|4 |    │ └─TABLE FULL SCAN          |t1      |1       |11          |
|5 |    └─EXCHANGE IN DISTR          |        |1       |3           |
|6 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |3           |
|7 |        └─TABLE FULL SCAN        |t2      |1       |3           |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
  3 - output([t1.a]), filter(nil), rowset=16
      affinitize, force partition granule
  4 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.a]), filter(nil), rowset=16
  6 - output([t2.a]), filter(nil), rowset=16
      (#keys=1, [t2.a]), is_single, dop=1
  7 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 except select a from t2 where a = 1;
Query Plan
=====================================================
|ID|OPERATOR             |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------
|0 |MERGE EXCEPT DISTINCT|    |1       |5           |
|1 |├─TABLE FULL SCAN    |t1  |1       |3           |
|2 |└─TABLE FULL SCAN    |t2  |1       |3           |
=====================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select a from t2 except select b from t3;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |34          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |34          |
|2 |  └─HASH EXCEPT DISTINCT         |        |1       |33          |
|3 |    ├─PX PARTITION ITERATOR      |        |1       |22          |
|4 |    │ └─HASH EXCEPT DISTINCT     |        |1       |22          |
|5 |    │   ├─TABLE FULL SCAN        |t1      |1       |11          |
|6 |    │   └─TABLE FULL SCAN        |t2      |1       |11          |
|7 |    └─EXCHANGE IN DISTR          |        |1       |12          |
|8 |      └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |11          |
|9 |        └─PX PARTITION ITERATOR  |        |1       |11          |
|10|          └─TABLE FULL SCAN      |t3      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
  3 - output([EXCEPT([1])]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  4 - output([EXCEPT([1])]), filter(nil), rowset=16
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t3.b]), filter(nil), rowset=16
  8 - output([t3.b]), filter(nil), rowset=16
      (#keys=1, [t3.b]), dop=1
  9 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 10 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 except select a from t2 except select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH EXCEPT DISTINCT       |        |1       |16          |
|1 |├─MERGE EXCEPT DISTINCT    |        |1       |5           |
|2 |│ ├─TABLE FULL SCAN        |t1      |1       |3           |
|3 |│ └─TABLE FULL SCAN        |t2      |1       |3           |
|4 |└─PX COORDINATOR           |        |1       |12          |
|5 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |    └─PX PARTITION ITERATOR|        |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([EXCEPT([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter([t3.b = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select a from t2 where a = 1 except select b from t3;
Query Plan
=======================================================================
|ID|OPERATOR                           |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------
|0 |PX COORDINATOR                     |        |1       |26          |
|1 |└─EXCHANGE OUT DISTR               |:EX10002|1       |26          |
|2 |  └─HASH EXCEPT DISTINCT           |        |1       |25          |
|3 |    ├─HASH EXCEPT DISTINCT         |        |1       |14          |
|4 |    │ ├─PX PARTITION ITERATOR      |        |1       |11          |
|5 |    │ │ └─TABLE FULL SCAN          |t1      |1       |11          |
|6 |    │ └─EXCHANGE IN DISTR          |        |1       |3           |
|7 |    │   └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |3           |
|8 |    │     └─TABLE FULL SCAN        |t2      |1       |3           |
|9 |    └─EXCHANGE IN DISTR            |        |1       |12          |
|10|      └─EXCHANGE OUT DISTR (PKEY)  |:EX10001|1       |11          |
|11|        └─PX PARTITION ITERATOR    |        |1       |11          |
|12|          └─TABLE FULL SCAN        |t3      |1       |11          |
=======================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
  3 - output([EXCEPT([1])]), filter(nil), rowset=16
  4 - output([t1.a]), filter(nil), rowset=16
      affinitize, force partition granule
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter(nil), rowset=16
  7 - output([t2.a]), filter(nil), rowset=16
      (#keys=1, [t2.a]), is_single, dop=1
  8 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.b]), filter(nil), rowset=16
 10 - output([t3.b]), filter(nil), rowset=16
      (#keys=1, [t3.b]), dop=1
 11 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 12 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 where a = 1 except select a from t2 where a = 1 except select b from t3;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |HASH EXCEPT DISTINCT       |        |1       |16          |
|1 |├─MERGE EXCEPT DISTINCT    |        |1       |5           |
|2 |│ ├─TABLE FULL SCAN        |t1      |1       |3           |
|3 |│ └─TABLE FULL SCAN        |t2      |1       |3           |
|4 |└─PX COORDINATOR           |        |1       |12          |
|5 |  └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|6 |    └─PX PARTITION ITERATOR|        |1       |11          |
|7 |      └─TABLE FULL SCAN    |t3      |1       |11          |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([EXCEPT([1])]), filter(nil), rowset=16
  2 - output([t1.a]), filter([t1.a = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  3 - output([t2.a]), filter([t2.a = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  4 - output([t3.b]), filter(nil), rowset=16
  5 - output([t3.b]), filter(nil), rowset=16
      dop=1
  6 - output([t3.b]), filter(nil), rowset=16
      force partition granule
  7 - output([t3.b]), filter([t3.b = 1]), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
explain select 1 a except select a from t1 except select a from t2;
Query Plan
=======================================================
|ID|OPERATOR               |NAME|EST.ROWS|EST.TIME(us)|
-------------------------------------------------------
|0 |MERGE EXCEPT DISTINCT  |    |1       |5           |
|1 |├─MERGE EXCEPT DISTINCT|    |1       |3           |
|2 |│ ├─EXPRESSION         |    |1       |1           |
|3 |│ └─TABLE FULL SCAN    |t1  |1       |3           |
|4 |└─TABLE FULL SCAN      |t2  |1       |3           |
=======================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([EXCEPT([1])]), filter(nil), rowset=16
  2 - output([1]), filter(nil)
      values({1})
  3 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  4 - output([cast(t2.a, BIGINT(20, 0))]), filter([cast(t2.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select 1 a except select a from t2;
Query Plan
=================================================================
|ID|OPERATOR                     |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |HASH EXCEPT DISTINCT         |        |1       |23          |
|1 |├─PX COORDINATOR             |        |1       |12          |
|2 |│ └─EXCHANGE OUT DISTR       |:EX10000|1       |12          |
|3 |│   └─HASH EXCEPT DISTINCT   |        |1       |11          |
|4 |│     ├─PX PARTITION ITERATOR|        |1       |11          |
|5 |│     │ └─TABLE FULL SCAN    |t1      |1       |11          |
|6 |│     └─EXPRESSION           |        |1       |1           |
|7 |└─PX COORDINATOR             |        |1       |12          |
|8 |  └─EXCHANGE OUT DISTR       |:EX20000|1       |11          |
|9 |    └─PX PARTITION ITERATOR  |        |1       |11          |
|10|      └─TABLE FULL SCAN      |t2      |1       |11          |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])]), filter(nil), rowset=16
  1 - output([EXCEPT([1])]), filter(nil), rowset=16
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
      dop=1
  3 - output([EXCEPT([1])]), filter(nil), rowset=16
  4 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
      force partition granule
  5 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([1]), filter(nil)
      values({1})
  7 - output([cast(t2.a, BIGINT(20, 0))]), filter(nil), rowset=16
  8 - output([t2.a]), filter(nil), rowset=16
      dop=1
  9 - output([t2.a]), filter(nil), rowset=16
      force partition granule
 10 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select a from t1 except select a from t2 except select 1 a;
Query Plan
================================================================
|ID|OPERATOR                    |NAME    |EST.ROWS|EST.TIME(us)|
----------------------------------------------------------------
|0 |PX COORDINATOR              |        |1       |23          |
|1 |└─EXCHANGE OUT DISTR        |:EX10000|1       |23          |
|2 |  └─HASH EXCEPT DISTINCT    |        |1       |22          |
|3 |    ├─PX PARTITION ITERATOR |        |1       |22          |
|4 |    │ └─HASH EXCEPT DISTINCT|        |1       |22          |
|5 |    │   ├─TABLE FULL SCAN   |t1      |1       |11          |
|6 |    │   └─TABLE FULL SCAN   |t2      |1       |11          |
|7 |    └─EXPRESSION            |        |1       |1           |
================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(EXCEPT([1]))]), filter(nil), rowset=16
      dop=1
  2 - output([EXCEPT([1])]), filter(nil), rowset=16
  3 - output([cast(EXCEPT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
      partition wise, force partition granule
  4 - output([cast(EXCEPT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
  5 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  6 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  7 - output([1]), filter(nil)
      values({1})
explain select * from (select a from t1 except select a from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |35          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |34          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |33          |
|3 |    └─HASH JOIN               |        |1       |33          |
|4 |      ├─SUBPLAN SCAN          |t3      |1       |22          |
|5 |      │ └─HASH EXCEPT DISTINCT|        |1       |22          |
|6 |      │   ├─TABLE FULL SCAN   |t1      |1       |11          |
|7 |      │   └─TABLE FULL SCAN   |t2      |1       |11          |
|8 |      └─TABLE FULL SCAN       |t4      |1       |11          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  4 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  5 - output([EXCEPT([1])]), filter(nil), rowset=16
  6 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  7 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 except select a from t2 except select a from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
====================================================================
|ID|OPERATOR                        |NAME    |EST.ROWS|EST.TIME(us)|
--------------------------------------------------------------------
|0 |PX COORDINATOR                  |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR            |:EX10000|1       |45          |
|2 |  └─PX PARTITION ITERATOR       |        |1       |44          |
|3 |    └─HASH JOIN                 |        |1       |44          |
|4 |      ├─SUBPLAN SCAN            |t4      |1       |33          |
|5 |      │ └─HASH EXCEPT DISTINCT  |        |1       |33          |
|6 |      │   ├─HASH EXCEPT DISTINCT|        |1       |22          |
|7 |      │   │ ├─TABLE FULL SCAN   |t1      |1       |11          |
|8 |      │   │ └─TABLE FULL SCAN   |t2      |1       |11          |
|9 |      │   └─TABLE FULL SCAN     |t3      |1       |11          |
|10|      └─TABLE FULL SCAN         |t5      |1       |11          |
====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  4 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  5 - output([EXCEPT([1])]), filter(nil), rowset=16
  6 - output([EXCEPT([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 except select a from t2 except select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=========================================================================
|ID|OPERATOR                             |NAME    |EST.ROWS|EST.TIME(us)|
-------------------------------------------------------------------------
|0 |PX COORDINATOR                       |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR                 |:EX10001|1       |46          |
|2 |  └─HASH JOIN                        |        |1       |44          |
|3 |    ├─SUBPLAN SCAN                   |t4      |1       |33          |
|4 |    │ └─HASH EXCEPT DISTINCT         |        |1       |33          |
|5 |    │   ├─PX PARTITION ITERATOR      |        |1       |22          |
|6 |    │   │ └─HASH EXCEPT DISTINCT     |        |1       |22          |
|7 |    │   │   ├─TABLE FULL SCAN        |t1      |1       |11          |
|8 |    │   │   └─TABLE FULL SCAN        |t2      |1       |11          |
|9 |    │   └─EXCHANGE IN DISTR          |        |1       |12          |
|10|    │     └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |11          |
|11|    │       └─PX PARTITION ITERATOR  |        |1       |11          |
|12|    │         └─TABLE FULL SCAN      |t3      |1       |11          |
|13|    └─PX PARTITION ITERATOR          |        |1       |11          |
|14|      └─TABLE FULL SCAN              |t5      |1       |11          |
=========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  4 - output([EXCEPT([1])]), filter(nil), rowset=16
  5 - output([EXCEPT([1])]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
  6 - output([EXCEPT([1])]), filter(nil), rowset=16
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.b]), filter(nil), rowset=16
 10 - output([t3.b]), filter(nil), rowset=16
      (#keys=1, [t3.b]), dop=1
 11 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 12 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 13 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, partition wise, force partition granule
 14 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 except select 1 a except select b from t3) as t4, t1 as t5 where t4.a = t5.a;
Query Plan
=============================================================================
|ID|OPERATOR                                 |NAME    |EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------------------
|0 |PX COORDINATOR                           |        |1       |37          |
|1 |└─EXCHANGE OUT DISTR                     |:EX10003|1       |36          |
|2 |  └─HASH JOIN                            |        |1       |35          |
|3 |    ├─EXCHANGE IN DISTR                  |        |1       |24          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)        |:EX10002|1       |24          |
|5 |    │   └─SUBPLAN SCAN                   |t4      |1       |23          |
|6 |    │     └─HASH EXCEPT DISTINCT         |        |1       |23          |
|7 |    │       ├─EXCHANGE IN DISTR          |        |1       |12          |
|8 |    │       │ └─EXCHANGE OUT DISTR       |:EX10000|1       |12          |
|9 |    │       │   └─HASH EXCEPT DISTINCT   |        |1       |11          |
|10|    │       │     ├─PX PARTITION ITERATOR|        |1       |11          |
|11|    │       │     │ └─TABLE FULL SCAN    |t1      |1       |11          |
|12|    │       │     └─EXPRESSION           |        |1       |1           |
|13|    │       └─EXCHANGE IN DISTR          |        |1       |12          |
|14|    │         └─EXCHANGE OUT DISTR       |:EX10001|1       |11          |
|15|    │           └─PX PARTITION ITERATOR  |        |1       |11          |
|16|    │             └─TABLE FULL SCAN      |t3      |1       |11          |
|17|    └─PX PARTITION ITERATOR              |        |1       |11          |
|18|      └─TABLE FULL SCAN                  |t5      |1       |11          |
=============================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  3 - output([t4.a]), filter(nil), rowset=16
  4 - output([t4.a]), filter(nil), rowset=16
      (#keys=1, [t4.a]), is_single, dop=1
  5 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  6 - output([EXCEPT([1])]), filter(nil), rowset=16
  7 - output([EXCEPT([1])]), filter(nil), rowset=16
  8 - output([EXCEPT([1])]), filter(nil), rowset=16
      dop=1
  9 - output([EXCEPT([1])]), filter(nil), rowset=16
 10 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
      force partition granule
 11 - output([cast(t1.a, BIGINT(20, 0))]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 12 - output([1]), filter(nil)
      values({1})
 13 - output([cast(t3.b, BIGINT(20, 0))]), filter(nil), rowset=16
 14 - output([t3.b]), filter(nil), rowset=16
      dop=1
 15 - output([t3.b]), filter(nil), rowset=16
      force partition granule
 16 - output([t3.b]), filter(nil), rowset=16
      access([t3.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 17 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      affinitize, force partition granule
 18 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 a except select a from t1 except select b from t2) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN       |        |1       |3           |
|1 |├─TABLE FULL SCAN                |t4      |1       |3           |
|2 |└─MATERIAL                       |        |1       |14          |
|3 |  └─SUBPLAN SCAN                 |t3      |1       |14          |
|4 |    └─HASH EXCEPT DISTINCT       |        |1       |14          |
|5 |      ├─MERGE EXCEPT DISTINCT    |        |1       |3           |
|6 |      │ ├─EXPRESSION             |        |1       |1           |
|7 |      │ └─TABLE FULL SCAN        |t1      |1       |3           |
|8 |      └─PX COORDINATOR           |        |1       |12          |
|9 |        └─EXCHANGE OUT DISTR     |:EX10000|1       |11          |
|10|          └─PX PARTITION ITERATOR|        |1       |11          |
|11|            └─TABLE FULL SCAN    |t2      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t4.a], [t4.b], [t4.c]), filter([t4.a = 1]), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t3.a]), filter(nil), rowset=16
  3 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  4 - output([EXCEPT([1])]), filter(nil), rowset=16
  5 - output([EXCEPT([1])]), filter(nil), rowset=16
  6 - output([1]), filter(nil)
      values({1})
  7 - output([cast(t1.a, BIGINT(20, 0))]), filter([cast(t1.a, BIGINT(20, 0)) = 1]), rowset=16
      access([t1.a]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
      dop=1
 10 - output([cast(t2.b, BIGINT(20, 0))]), filter(nil), rowset=16
      force partition granule
 11 - output([cast(t2.b, BIGINT(20, 0))]), filter([cast(t2.b, BIGINT(20, 0)) = 1]), rowset=16
      access([t2.b]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select a from t1 except select a from t2 except select 1 a) as t3, t1 as t4 where t3.a = t4.a;
Query Plan
========================================================================
|ID|OPERATOR                            |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------------
|0 |PX COORDINATOR                      |        |1       |36          |
|1 |└─EXCHANGE OUT DISTR                |:EX10001|1       |35          |
|2 |  └─HASH JOIN                       |        |1       |34          |
|3 |    ├─EXCHANGE IN DISTR             |        |1       |23          |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)   |:EX10000|1       |23          |
|5 |    │   └─SUBPLAN SCAN              |t3      |1       |22          |
|6 |    │     └─HASH EXCEPT DISTINCT    |        |1       |22          |
|7 |    │       ├─PX PARTITION ITERATOR |        |1       |22          |
|8 |    │       │ └─HASH EXCEPT DISTINCT|        |1       |22          |
|9 |    │       │   ├─TABLE FULL SCAN   |t1      |1       |11          |
|10|    │       │   └─TABLE FULL SCAN   |t2      |1       |11          |
|11|    │       └─EXPRESSION            |        |1       |1           |
|12|    └─PX PARTITION ITERATOR         |        |1       |11          |
|13|      └─TABLE FULL SCAN             |t4      |1       |11          |
========================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t3.a, t4.a, t4.b, t4.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t3.a], [t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      equal_conds([t3.a = t4.a]), other_conds(nil)
  3 - output([t3.a]), filter(nil), rowset=16
  4 - output([t3.a]), filter(nil), rowset=16
      (#keys=1, [t3.a]), dop=1
  5 - output([t3.a]), filter(nil), rowset=16
      access([t3.a])
  6 - output([EXCEPT([1])]), filter(nil), rowset=16
  7 - output([cast(EXCEPT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
      partition wise, force partition granule
  8 - output([cast(EXCEPT([1]), BIGINT(20, 0))]), filter(nil), rowset=16
  9 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
 11 - output([1]), filter(nil)
      values({1})
 12 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      affinitize, force partition granule
 13 - output([t4.a], [t4.b], [t4.c]), filter(nil), rowset=16
      access([t4.a], [t4.b], [t4.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t4.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select t2.a from t1, t2 where t1.a = t2.a except select a from t1 as t3) as t4, t2 as t5 where t4.a = t5.a;
Query Plan
==================================================================
|ID|OPERATOR                      |NAME    |EST.ROWS|EST.TIME(us)|
------------------------------------------------------------------
|0 |PX COORDINATOR                |        |1       |46          |
|1 |└─EXCHANGE OUT DISTR          |:EX10000|1       |45          |
|2 |  └─PX PARTITION ITERATOR     |        |1       |44          |
|3 |    └─HASH JOIN               |        |1       |44          |
|4 |      ├─SUBPLAN SCAN          |t4      |1       |33          |
|5 |      │ └─HASH EXCEPT DISTINCT|        |1       |33          |
|6 |      │   ├─HASH JOIN         |        |1       |22          |
|7 |      │   │ ├─TABLE FULL SCAN |t1      |1       |11          |
|8 |      │   │ └─TABLE FULL SCAN |t2      |1       |11          |
|9 |      │   └─TABLE FULL SCAN   |t3      |1       |11          |
|10|      └─TABLE FULL SCAN       |t5      |1       |11          |
==================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t4.a, t5.a, t5.b, t5.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      partition wise, force partition granule
  3 - output([t4.a], [t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      equal_conds([t4.a = t5.a]), other_conds(nil)
  4 - output([t4.a]), filter(nil), rowset=16
      access([t4.a])
  5 - output([EXCEPT([1])]), filter(nil), rowset=16
  6 - output([t2.a]), filter(nil), rowset=16
      equal_conds([t1.a = t2.a]), other_conds(nil)
  7 - output([t1.a]), filter(nil), rowset=16
      access([t1.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  8 - output([t2.a]), filter(nil), rowset=16
      access([t2.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t2.__pk_increment]), range(MIN ; MAX)always true
  9 - output([t3.a]), filter(nil), rowset=16
      access([t3.a]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t3.__pk_increment]), range(MIN ; MAX)always true
 10 - output([t5.a], [t5.b], [t5.c]), filter(nil), rowset=16
      access([t5.a], [t5.b], [t5.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t5.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 c1, 1 c2) t2 inner join t1 on t2.c1 = t1.a;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN |    |1       |3           |
|1 |├─TABLE FULL SCAN          |t1  |1       |3           |
|2 |└─MATERIAL                 |    |1       |1           |
|3 |  └─SUBPLAN SCAN           |t2  |1       |1           |
|4 |    └─EXPRESSION           |    |1       |1           |
===========================================================
Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t1.a], [t1.b], [t1.c]), filter([t1.a = 1]), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  4 - output([1], [1]), filter(nil)
      values({1, 1})
explain select * from (select 1 c1, 1 c2) t2 left join t1 on t2.c1 = t1.a;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN CARTESIAN |    |1       |4           |
|1 |├─SUBPLAN SCAN                   |t2  |1       |1           |
|2 |│ └─EXPRESSION                   |    |1       |1           |
|3 |└─TABLE FULL SCAN                |t1  |1       |3           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  2 - output([1], [1]), filter(nil)
      values({1, 1})
  3 - output([t1.a], [t1.b], [t1.c]), filter([1 = t1.a]), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from (select 1 c1, 1 c2) t2 right join t1 on t2.c1 = t1.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |14          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |13          |
|2 |  └─NESTED-LOOP OUTER JOIN |        |1       |11          |
|3 |    ├─PX PARTITION ITERATOR|        |1       |11          |
|4 |    │ └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |    └─MATERIAL             |        |1       |1           |
|6 |      └─SUBPLAN SCAN       |t2      |1       |1           |
|7 |        └─EXPRESSION       |        |1       |1           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t2.c1, t2.c2, t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t2.c1, t2.c2, t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t2.c1], [t2.c2]), filter(nil), rowset=16
      conds([1 = t1.a]), nl_params_(nil), use_batch=false
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  7 - output([1], [1]), filter(nil)
      values({1, 1})
explain select * from (select 1 c1, 1 c2) t2 full join t1 on t2.c1 = t1.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |14          |
|2 |  └─HASH FULL OUTER JOIN         |        |1       |12          |
|3 |    ├─EXCHANGE IN DISTR          |        |1       |1           |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |1           |
|5 |    │   └─SUBPLAN SCAN           |t2      |1       |1           |
|6 |    │     └─EXPRESSION           |        |1       |1           |
|7 |    └─PX PARTITION ITERATOR      |        |1       |11          |
|8 |      └─TABLE FULL SCAN          |t1      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t2.c1, t2.c2, t1.a, t1.b, t1.c)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t2.c1, t2.c2, t1.a, t1.b, t1.c)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.c1], [t1.a], [t2.c2], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t2.c1 = t1.a]), other_conds(nil)
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      (#keys=1, [t2.c1]), is_single, dop=1
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  6 - output([1], [1]), filter(nil)
      values({1, 1})
  7 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      affinitize, force partition granule
  8 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 inner join (select 1 c1, 1 c2) t2 on t2.c1 = t1.a;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN |    |1       |3           |
|1 |├─TABLE FULL SCAN          |t1  |1       |3           |
|2 |└─MATERIAL                 |    |1       |1           |
|3 |  └─SUBPLAN SCAN           |t2  |1       |1           |
|4 |    └─EXPRESSION           |    |1       |1           |
===========================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.c1], [t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t1.a], [t1.b], [t1.c]), filter([t1.a = 1]), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  4 - output([1], [1]), filter(nil)
      values({1, 1})
explain select * from t1 left join (select 1 c1, 1 c2) t2 on t2.c1 = t1.a;
Query Plan
===============================================================
|ID|OPERATOR                   |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------
|0 |PX COORDINATOR             |        |1       |14          |
|1 |└─EXCHANGE OUT DISTR       |:EX10000|1       |13          |
|2 |  └─NESTED-LOOP OUTER JOIN |        |1       |11          |
|3 |    ├─PX PARTITION ITERATOR|        |1       |11          |
|4 |    │ └─TABLE FULL SCAN    |t1      |1       |11          |
|5 |    └─MATERIAL             |        |1       |1           |
|6 |      └─SUBPLAN SCAN       |t2      |1       |1           |
|7 |        └─EXPRESSION       |        |1       |1           |
===============================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.c1, t2.c2)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.c1, t2.c2)]), filter(nil), rowset=16
      dop=1
  2 - output([t1.a], [t1.b], [t1.c], [t2.c1], [t2.c2]), filter(nil), rowset=16
      conds([1 = t1.a]), nl_params_(nil), use_batch=false
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      force partition granule
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  7 - output([1], [1]), filter(nil)
      values({1, 1})
explain select * from t1 right join (select 1 c1, 1 c2) t2 on t2.c1 = t1.a;
Query Plan
=================================================================
|ID|OPERATOR                         |NAME|EST.ROWS|EST.TIME(us)|
-----------------------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN CARTESIAN |    |1       |4           |
|1 |├─SUBPLAN SCAN                   |t2  |1       |1           |
|2 |│ └─EXPRESSION                   |    |1       |1           |
|3 |└─TABLE FULL SCAN                |t1  |1       |3           |
=================================================================
Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.c1], [t2.c2]), filter(nil), rowset=16
      conds(nil), nl_params_(nil), use_batch=false
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  2 - output([1], [1]), filter(nil)
      values({1, 1})
  3 - output([t1.a], [t1.b], [t1.c]), filter([1 = t1.a]), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p1)
      is_index_back=false, is_global_index=false, filter_before_indexback[false], 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
explain select * from t1 full join (select 1 c1, 1 c2) t2 on t2.c1 = t1.a;
Query Plan
=====================================================================
|ID|OPERATOR                         |NAME    |EST.ROWS|EST.TIME(us)|
---------------------------------------------------------------------
|0 |PX COORDINATOR                   |        |1       |15          |
|1 |└─EXCHANGE OUT DISTR             |:EX10001|1       |14          |
|2 |  └─HASH FULL OUTER JOIN         |        |1       |12          |
|3 |    ├─EXCHANGE IN DISTR          |        |1       |1           |
|4 |    │ └─EXCHANGE OUT DISTR (PKEY)|:EX10000|1       |1           |
|5 |    │   └─SUBPLAN SCAN           |t2      |1       |1           |
|6 |    │     └─EXPRESSION           |        |1       |1           |
|7 |    └─PX PARTITION ITERATOR      |        |1       |11          |
|8 |      └─TABLE FULL SCAN          |t1      |1       |11          |
=====================================================================
Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.c1, t2.c2)]), filter(nil), rowset=16
  1 - output([INTERNAL_FUNCTION(t1.a, t1.b, t1.c, t2.c1, t2.c2)]), filter(nil), rowset=16
      dop=1
  2 - output([t2.c1], [t1.a], [t2.c2], [t1.b], [t1.c]), filter(nil), rowset=16
      equal_conds([t2.c1 = t1.a]), other_conds(nil)
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      (#keys=1, [t2.c1]), is_single, dop=1
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=16
      access([t2.c1], [t2.c2])
  6 - output([1], [1]), filter(nil)
      values({1, 1})
  7 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      affinitize, force partition granule
  8 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=16
      access([t1.a], [t1.b], [t1.c]), partitions(p[0-4])
      is_index_back=false, is_global_index=false, 
      range_key([t1.__pk_increment]), range(MIN ; MAX)always true
drop table if exists t1, t2, t3;
